
ADXL_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  2000000c  08004a94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08004a94  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d140  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf5  00000000  00000000  0002d17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002273c  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009329  00000000  00000000  00052abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d197f  00000000  00000000  0005bde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e98  00000000  00000000  0012d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004a18 	.word	0x08004a18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004a18 	.word	0x08004a18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <reg_read_IT>:
static void reg_write(SPI_Comm, uint8_t, uint8_t);
static void fifo_init(SPI_Comm, int);
static void int1_init(SPI_Comm);

void reg_read_IT(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	f107 0408 	add.w	r4, r7, #8
 80004de:	e884 0003 	stmia.w	r4, {r0, r1}
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(spi.cs->port, spi.cs->pin, GPIO_PIN_RESET);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	889b      	ldrh	r3, [r3, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	f001 f832 	bl	800156c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000508:	68b8      	ldr	r0, [r7, #8]
 800050a:	f107 0117 	add.w	r1, r7, #23
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	2201      	movs	r2, #1
 8000514:	f002 faf9 	bl	8002b0a <HAL_SPI_Transmit>
	HAL_SPI_Receive_IT(spi.handle, rx, size);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800051c:	b292      	uxth	r2, r2
 800051e:	6839      	ldr	r1, [r7, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f002 ffa3 	bl	800346c <HAL_SPI_Receive_IT>
	return;
 8000526:	bf00      	nop
}
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd90      	pop	{r4, r7, pc}

0800052e <reg_read>:

void reg_read(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 800052e:	b590      	push	{r4, r7, lr}
 8000530:	b087      	sub	sp, #28
 8000532:	af00      	add	r7, sp, #0
 8000534:	f107 0408 	add.w	r4, r7, #8
 8000538:	e884 0003 	stmia.w	r4, {r0, r1}
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	4613      	mov	r3, r2
 8000540:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b25b      	sxtb	r3, r3
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	889b      	ldrh	r3, [r3, #4]
 800055a:	4619      	mov	r1, r3
 800055c:	4610      	mov	r0, r2
 800055e:	f001 f81d 	bl	800159c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f107 0117 	add.w	r1, r7, #23
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	f002 facc 	bl	8002b0a <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, size, HAL_MAX_DELAY);
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000576:	b29a      	uxth	r2, r3
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	f002 fc32 	bl	8002de6 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	889b      	ldrh	r3, [r3, #4]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f001 f805 	bl	800159c <HAL_GPIO_TogglePin>

	return;
 8000592:	bf00      	nop
}
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}

0800059a <reg_read_CS>:

void reg_read_CS(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	f107 0408 	add.w	r4, r7, #8
 80005a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	4613      	mov	r3, r2
 80005ac:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(spi.cs->port, spi.cs->pin, GPIO_PIN_RESET);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	889b      	ldrh	r3, [r3, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	f000 ffcf 	bl	800156c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 80005ce:	68b8      	ldr	r0, [r7, #8]
 80005d0:	f107 0117 	add.w	r1, r7, #23
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	2201      	movs	r2, #1
 80005da:	f002 fa96 	bl	8002b0a <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, size, HAL_MAX_DELAY);
 80005de:	68b8      	ldr	r0, [r7, #8]
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	6839      	ldr	r1, [r7, #0]
 80005ea:	f002 fbfc 	bl	8002de6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spi.cs->port, spi.cs->pin, GPIO_PIN_SET);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	f000 ffb7 	bl	800156c <HAL_GPIO_WritePin>

	return;
 80005fe:	bf00      	nop
}
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd90      	pop	{r4, r7, pc}

08000606 <reg_write>:

static void reg_write(SPI_Comm spi, uint8_t addr, uint8_t payload)
{
 8000606:	b590      	push	{r4, r7, lr}
 8000608:	b087      	sub	sp, #28
 800060a:	af00      	add	r7, sp, #0
 800060c:	f107 0408 	add.w	r4, r7, #8
 8000610:	e884 0003 	stmia.w	r4, {r0, r1}
 8000614:	4611      	mov	r1, r2
 8000616:	461a      	mov	r2, r3
 8000618:	460b      	mov	r3, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[] = {(addr << 1), payload};
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	753b      	strb	r3, [r7, #20]
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	4610      	mov	r0, r2
 8000638:	f000 ffb0 	bl	800159c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f107 0114 	add.w	r1, r7, #20
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	2202      	movs	r2, #2
 8000648:	f002 fa5f 	bl	8002b0a <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	4619      	mov	r1, r3
 8000656:	4610      	mov	r0, r2
 8000658:	f000 ffa0 	bl	800159c <HAL_GPIO_TogglePin>

	return;
 800065c:	bf00      	nop
}
 800065e:	371c      	adds	r7, #28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd90      	pop	{r4, r7, pc}

08000664 <fifo_init>:


static void fifo_init(SPI_Comm spi, int samples) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000672:	607a      	str	r2, [r7, #4]
	uint8_t samples_MSB = samples >> 8;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	121b      	asrs	r3, r3, #8
 8000678:	75fb      	strb	r3, [r7, #23]
	uint8_t samples_LSB = samples & 0xFF;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	75bb      	strb	r3, [r7, #22]
	uint8_t payload_FIFO_CTL = samples_MSB | 0x02;
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	757b      	strb	r3, [r7, #21]
	reg_write(spi, ADXL372_FIFO_CTL, payload_FIFO_CTL); //0b00000011 -> stream mode; sample MSB
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	223a      	movs	r2, #58	; 0x3a
 800068a:	f107 0108 	add.w	r1, r7, #8
 800068e:	c903      	ldmia	r1, {r0, r1}
 8000690:	f7ff ffb9 	bl	8000606 <reg_write>
	reg_write(spi, ADXL372_FIFO_SAMPLES, samples_LSB); //0b1_00000000 -> 256 samples
 8000694:	7dbb      	ldrb	r3, [r7, #22]
 8000696:	2239      	movs	r2, #57	; 0x39
 8000698:	f107 0108 	add.w	r1, r7, #8
 800069c:	c903      	ldmia	r1, {r0, r1}
 800069e:	f7ff ffb2 	bl	8000606 <reg_write>
}
 80006a2:	bf00      	nop
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <int1_init>:

static void int1_init(SPI_Comm spi) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	463b      	mov	r3, r7
 80006b2:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_write(spi, ADXL372_INT1_MAP, 0x04); //0b00000100 -> INT1 on FIFO Full Condition
 80006b6:	2304      	movs	r3, #4
 80006b8:	223b      	movs	r2, #59	; 0x3b
 80006ba:	4639      	mov	r1, r7
 80006bc:	c903      	ldmia	r1, {r0, r1}
 80006be:	f7ff ffa2 	bl	8000606 <reg_write>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <stream_start>:

void stream_start(SPI_Comm spi, int samples) {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80006d8:	607a      	str	r2, [r7, #4]
	reg_write(spi, ADXL372_POWER_CTL, 0x00); // set standby mode before changing settings
 80006da:	2300      	movs	r3, #0
 80006dc:	223f      	movs	r2, #63	; 0x3f
 80006de:	f107 0108 	add.w	r1, r7, #8
 80006e2:	c903      	ldmia	r1, {r0, r1}
 80006e4:	f7ff ff8f 	bl	8000606 <reg_write>
	fifo_init(spi, samples);
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f2:	f7ff ffb7 	bl	8000664 <fifo_init>
	int1_init(spi);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006fe:	f7ff ffd4 	bl	80006aa <int1_init>

	reg_write(spi, ADXL372_POWER_CTL, 0x03); //full bandwidth mode; HPF/LPF enabled
 8000702:	2303      	movs	r3, #3
 8000704:	223f      	movs	r2, #63	; 0x3f
 8000706:	f107 0108 	add.w	r1, r7, #8
 800070a:	c903      	ldmia	r1, {r0, r1}
 800070c:	f7ff ff7b 	bl	8000606 <reg_write>
	//reg_write(spi, ADXL372_POWER_CTL, 0x22); //instant on mode; high threshold
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <fifo_data>:

void fifo_data(SPI_Comm spi, uint8_t* data, size_t data_size) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af02      	add	r7, sp, #8
 800071e:	f107 0408 	add.w	r4, r7, #8
 8000722:	e884 0003 	stmia.w	r4, {r0, r1}
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	603b      	str	r3, [r7, #0]
	uint8_t dummy = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	75fb      	strb	r3, [r7, #23]
	reg_read(spi, ADXL372_FIFO_DATA, data, data_size);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2242      	movs	r2, #66	; 0x42
 8000736:	f107 0108 	add.w	r1, r7, #8
 800073a:	c903      	ldmia	r1, {r0, r1}
 800073c:	f7ff fef7 	bl	800052e <reg_read>
	reg_read(spi, ADXL372_STATUS_1, &dummy, sizeof(dummy));
 8000740:	f107 0217 	add.w	r2, r7, #23
 8000744:	2301      	movs	r3, #1
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	4613      	mov	r3, r2
 800074a:	2204      	movs	r2, #4
 800074c:	f107 0108 	add.w	r1, r7, #8
 8000750:	c903      	ldmia	r1, {r0, r1}
 8000752:	f7ff feec 	bl	800052e <reg_read>
}
 8000756:	bf00      	nop
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fbba 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f834 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f942 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f910 	bl	8000994 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000774:	f000 f8a0 	bl	80008b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f8dc 	bl	8000934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  // initialize SPI
  chip_select.port = GPIOC;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <main+0x5c>)
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <main+0x60>)
 8000780:	601a      	str	r2, [r3, #0]
  chip_select.pin = GPIO_PIN_4;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0x5c>)
 8000784:	2210      	movs	r2, #16
 8000786:	809a      	strh	r2, [r3, #4]
  accel_spi.handle = &hspi1;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0x64>)
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <main+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  accel_spi.cs = &chip_select;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <main+0x64>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <main+0x5c>)
 8000792:	605a      	str	r2, [r3, #4]

  fifo_buffer_size = sizeof(fifo_buffer);
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <main+0x6c>)
 8000796:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800079a:	601a      	str	r2, [r3, #0]

  stream_start(accel_spi, FIFO_SAMPLES);
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <main+0x64>)
 800079e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80007a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a6:	f7ff ff90 	bl	80006ca <stream_start>
  fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <main+0x6c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <main+0x64>)
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <main+0x70>)
 80007b2:	c903      	ldmia	r1, {r0, r1}
 80007b4:	f7ff ffb0 	bl	8000718 <fifo_data>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x58>
 80007ba:	bf00      	nop
 80007bc:	200002a4 	.word	0x200002a4
 80007c0:	48000800 	.word	0x48000800
 80007c4:	200002ac 	.word	0x200002ac
 80007c8:	200002b4 	.word	0x200002b4
 80007cc:	20000398 	.word	0x20000398
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0b0      	sub	sp, #192	; 0xc0
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 f910 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2268      	movs	r2, #104	; 0x68
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 f902 	bl	8004a08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000828:	230a      	movs	r3, #10
 800082a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082e:	2307      	movs	r3, #7
 8000830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff3f 	bl	80016c8 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000850:	f000 f9bc 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000868:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800086c:	2104      	movs	r1, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fb4a 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087a:	f000 f9a7 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800087e:	2303      	movs	r3, #3
 8000880:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fd3f 	bl	8002310 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000898:	f000 f998 	bl	8000bcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a0:	f000 febc 	bl	800161c <HAL_PWREx_ControlVoltageScaling>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008aa:	f000 f98f 	bl	8000bcc <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	37c0      	adds	r7, #192	; 0xc0
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_SPI1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_SPI1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_SPI1_Init+0x74>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI1_Init+0x74>)
 80008d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI1_Init+0x74>)
 80008ee:	2218      	movs	r2, #24
 80008f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_SPI1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI1_Init+0x74>)
 8000906:	2207      	movs	r2, #7
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI1_Init+0x74>)
 8000912:	2208      	movs	r2, #8
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_SPI1_Init+0x74>)
 8000918:	f002 f854 	bl	80029c4 <HAL_SPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 f953 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200002b4 	.word	0x200002b4
 8000930:	40013000 	.word	0x40013000

08000934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART1_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART1_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART1_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART1_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART1_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000978:	f003 fb80 	bl	800407c <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f923 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000224 	.word	0x20000224
 8000990:	40013800 	.word	0x40013800

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART2_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART2_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d8:	f003 fb50 	bl	800407c <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f8f3 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000318 	.word	0x20000318
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a3d      	ldr	r2, [pc, #244]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a37      	ldr	r2, [pc, #220]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2b      	ldr	r2, [pc, #172]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_GPIO_Init+0x114>)
 8000a70:	f000 fd7c 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_GPIO_Init+0x118>)
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <MX_GPIO_Init+0x114>)
 8000a8a:	f000 fbf5 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_GPIO_Init+0x11c>)
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fbe8 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_GPIO_Init+0x114>)
 8000ac0:	f000 fbda 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_GPIO_Init+0x11c>)
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_GPIO_Init+0x114>)
 8000ad8:	f000 fbce 	bl	8001278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	f000 fb52 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f000 fb6b 	bl	80011c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2017      	movs	r0, #23
 8000af2:	f000 fb4a 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000af6:	2017      	movs	r0, #23
 8000af8:	f000 fb63 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	10210000 	.word	0x10210000
 8000b10:	10110000 	.word	0x10110000

08000b14 <HAL_SPI_RxCpltCallback>:
	return;
}

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
	if (fifo_read_flag == 0) {
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_SPI_RxCpltCallback+0x5c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d117      	bne.n	8000b56 <HAL_SPI_RxCpltCallback+0x42>
		fifo_read_flag = 1;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_SPI_RxCpltCallback+0x5c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
		uint8_t dummy = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, fifo_buffer, fifo_buffer_size, HAL_MAX_DELAY);
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_SPI_RxCpltCallback+0x60>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	490f      	ldr	r1, [pc, #60]	; (8000b78 <HAL_SPI_RxCpltCallback+0x64>)
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_SPI_RxCpltCallback+0x68>)
 8000b3e:	f003 faeb 	bl	8004118 <HAL_UART_Transmit>
		reg_read_CS(accel_spi, ADXL372_STATUS_1, &dummy, sizeof(dummy));
 8000b42:	f107 020f 	add.w	r2, r7, #15
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <HAL_SPI_RxCpltCallback+0x6c>)
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	2204      	movs	r2, #4
 8000b50:	c903      	ldmia	r1, {r0, r1}
 8000b52:	f7ff fd22 	bl	800059a <reg_read_CS>
	}
	// Set CS pin to high and raise flag
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2110      	movs	r1, #16
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_SPI_RxCpltCallback+0x70>)
 8000b5c:	f000 fd06 	bl	800156c <HAL_GPIO_WritePin>
	spi_recv_flag = 1;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_SPI_RxCpltCallback+0x74>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000029 	.word	0x20000029
 8000b74:	20000398 	.word	0x20000398
 8000b78:	2000002c 	.word	0x2000002c
 8000b7c:	20000224 	.word	0x20000224
 8000b80:	200002ac 	.word	0x200002ac
 8000b84:	48000800 	.word	0x48000800
 8000b88:	20000028 	.word	0x20000028

08000b8c <HAL_GPIO_EXTI_Callback>:


// ISR for FIFO Full
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	/*
	uint8_t dummy = 0;
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_2, &dummy, sizeof(dummy));
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_1, &dummy, sizeof(dummy));
	*/
	if(GPIO_Pin == GPIO_PIN_0) {
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d10b      	bne.n	8000bb4 <HAL_GPIO_EXTI_Callback+0x28>
		fifo_read_flag = 0;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x30>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		//fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
		reg_read_IT(accel_spi, ADXL372_FIFO_DATA, fifo_buffer, fifo_buffer_size);
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000bac:	2242      	movs	r2, #66	; 0x42
 8000bae:	c903      	ldmia	r1, {r0, r1}
 8000bb0:	f7ff fc90 	bl	80004d4 <reg_read_IT>
	}

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000029 	.word	0x20000029
 8000bc0:	20000398 	.word	0x20000398
 8000bc4:	200002ac 	.word	0x200002ac
 8000bc8:	2000002c 	.word	0x2000002c

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x6>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d130      	bne.n	8000ca0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c2      	movs	r3, #194	; 0xc2
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 faf4 	bl	8001278 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2023      	movs	r0, #35	; 0x23
 8000c96:	f000 fa78 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c9a:	2023      	movs	r0, #35	; 0x23
 8000c9c:	f000 fa91 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <HAL_UART_MspInit+0xdc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12a      	bne.n	8000d28 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d14:	2307      	movs	r3, #7
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 faa9 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d26:	e02d      	b.n	8000d84 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0xe4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d62:	230c      	movs	r3, #12
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d72:	2307      	movs	r3, #7
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f000 fa7a 	bl	8001278 <HAL_GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	; 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40004400 	.word	0x40004400

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8d6 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fbed 	bl	80015d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000dfe:	2080      	movs	r0, #128	; 0x80
 8000e00:	f000 fbe6 	bl	80015d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <SPI1_IRQHandler+0x10>)
 8000e0e:	f002 fc8d 	bl	800372c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002b4 	.word	0x200002b4

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <SystemInit+0x64>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <SystemInit+0x64>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <SystemInit+0x68>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <SystemInit+0x68>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <SystemInit+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <SystemInit+0x68>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <SystemInit+0x68>)
 8000e48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <SystemInit+0x68>)
 8000e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <SystemInit+0x68>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <SystemInit+0x68>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <SystemInit+0x68>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SystemInit+0x64>)
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	609a      	str	r2, [r3, #8]
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	40021000 	.word	0x40021000

08000e88 <Reset_Handler>:
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopForever+0x2>
 8000e8c:	f7ff ffc6 	bl	8000e1c <SystemInit>
 8000e90:	2100      	movs	r1, #0
 8000e92:	e003      	b.n	8000e9c <LoopCopyDataInit>

08000e94 <CopyDataInit>:
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <LoopForever+0x6>)
 8000e96:	585b      	ldr	r3, [r3, r1]
 8000e98:	5043      	str	r3, [r0, r1]
 8000e9a:	3104      	adds	r1, #4

08000e9c <LoopCopyDataInit>:
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <LoopForever+0xa>)
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopForever+0xe>)
 8000ea0:	1842      	adds	r2, r0, r1
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3f6      	bcc.n	8000e94 <CopyDataInit>
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
 8000ea8:	e002      	b.n	8000eb0 <LoopFillZerobss>

08000eaa <FillZerobss>:
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f842 3b04 	str.w	r3, [r2], #4

08000eb0 <LoopFillZerobss>:
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LoopForever+0x16>)
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3f9      	bcc.n	8000eaa <FillZerobss>
 8000eb6:	f003 fd83 	bl	80049c0 <__libc_init_array>
 8000eba:	f7ff fc51 	bl	8000760 <main>

08000ebe <LoopForever>:
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
 8000ec0:	20028000 	.word	0x20028000
 8000ec4:	08004a88 	.word	0x08004a88
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	200003a0 	.word	0x200003a0

08000ed8 <ADC1_IRQHandler>:
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_IRQHandler>
	...

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f93e 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f80f 	bl	8000f1c <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fe63 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f949 	bl	80011de <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f913 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000039c 	.word	0x2000039c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000039c 	.word	0x2000039c

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d005      	beq.n	800121a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2204      	movs	r2, #4
 8001212:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e029      	b.n	800126e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020e 	bic.w	r2, r2, #14
 8001228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 021c 	and.w	r2, r3, #28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
    }
  }
  return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e154      	b.n	8001532 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8146 	beq.w	800152c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d00b      	beq.n	80012c0 <HAL_GPIO_Init+0x48>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d007      	beq.n	80012c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	2b11      	cmp	r3, #17
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b12      	cmp	r3, #18
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0xea>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d123      	bne.n	80013aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0203 	and.w	r2, r3, #3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a0 	beq.w	800152c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_GPIO_Init+0x2d8>)
 80013ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f0:	4a57      	ldr	r2, [pc, #348]	; (8001550 <HAL_GPIO_Init+0x2d8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6613      	str	r3, [r2, #96]	; 0x60
 80013f8:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_GPIO_Init+0x2d8>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001404:	4a53      	ldr	r2, [pc, #332]	; (8001554 <HAL_GPIO_Init+0x2dc>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142e:	d019      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d013      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2e4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_GPIO_Init+0x2ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_GPIO_Init+0x1dc>
 8001450:	2304      	movs	r3, #4
 8001452:	e008      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001454:	2307      	movs	r3, #7
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2303      	movs	r3, #3
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001476:	4937      	ldr	r1, [pc, #220]	; (8001554 <HAL_GPIO_Init+0x2dc>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fc:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f aea3 	bne.w	8001288 <HAL_GPIO_Init+0x10>
  }
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	48000400 	.word	0x48000400
 800155c:	48000800 	.word	0x48000800
 8001560:	48000c00 	.word	0x48000c00
 8001564:	48001000 	.word	0x48001000
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001588:	e002      	b.n	8001590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43d9      	mvns	r1, r3
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	400b      	ands	r3, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff facc 	bl	8000b8c <HAL_GPIO_EXTI_Callback>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_PWREx_GetVoltageRange+0x18>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40007000 	.word	0x40007000

0800161c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162a:	d130      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001638:	d038      	beq.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2232      	movs	r2, #50	; 0x32
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001660:	e002      	b.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3b01      	subs	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d102      	bne.n	800167c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f2      	bne.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d110      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e00f      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	d007      	beq.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000
 80016c0:	20000000 	.word	0x20000000
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f000 bc11 	b.w	8001efe <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e6:	4b9e      	ldr	r3, [pc, #632]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80e4 	beq.w	80018c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_RCC_OscConfig+0x4c>
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	f040 808b 	bne.w	8001822 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 8087 	bne.w	8001822 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001714:	4b92      	ldr	r3, [pc, #584]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x64>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e3e8      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1a      	ldr	r2, [r3, #32]
 8001730:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_RCC_OscConfig+0x7e>
 800173c:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001744:	e005      	b.n	8001752 <HAL_RCC_OscConfig+0x8a>
 8001746:	4b86      	ldr	r3, [pc, #536]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001752:	4293      	cmp	r3, r2
 8001754:	d223      	bcs.n	800179e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fd78 	bl	8002250 <RCC_SetFlashLatencyFromMSIRange>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e3c9      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176a:	4b7d      	ldr	r3, [pc, #500]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7c      	ldr	r2, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4977      	ldr	r1, [pc, #476]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	4972      	ldr	r1, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e025      	b.n	80017ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179e:	4b70      	ldr	r3, [pc, #448]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6f      	ldr	r2, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	496a      	ldr	r1, [pc, #424]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4965      	ldr	r1, [pc, #404]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fd38 	bl	8002250 <RCC_SetFlashLatencyFromMSIRange>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e389      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ea:	f000 fc6f 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80017ee:	4601      	mov	r1, r0
 80017f0:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	4a5a      	ldr	r2, [pc, #360]	; (8001964 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	fa21 f303 	lsr.w	r3, r1, r3
 8001806:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x2a0>)
 8001808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800180a:	4b58      	ldr	r3, [pc, #352]	; (800196c <HAL_RCC_OscConfig+0x2a4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb84 	bl	8000f1c <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d052      	beq.n	80018c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	e36d      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d032      	beq.n	8001890 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001836:	f7ff fbc1 	bl	8000fbc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183e:	f7ff fbbd 	bl	8000fbc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e356      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185c:	4b40      	ldr	r3, [pc, #256]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	493a      	ldr	r1, [pc, #232]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	4935      	ldr	r1, [pc, #212]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
 800188e:	e01a      	b.n	80018c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb8e 	bl	8000fbc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb8a 	bl	8000fbc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e323      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1dc>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d073      	beq.n	80019ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x21c>
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d10e      	bne.n	80018fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d063      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d15f      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e300      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x24c>
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0x288>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x270>
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x288>
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_RCC_OscConfig+0x298>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fb30 	bl	8000fbc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	e010      	b.n	8001982 <HAL_RCC_OscConfig+0x2ba>
 8001960:	40021000 	.word	0x40021000
 8001964:	08004a30 	.word	0x08004a30
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fb24 	bl	8000fbc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e2bd      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001982:	4baf      	ldr	r3, [pc, #700]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x2a8>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fb14 	bl	8000fbc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fb10 	bl	8000fbc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e2a9      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019aa:	4ba5      	ldr	r3, [pc, #660]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x2d0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d060      	beq.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x310>
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d119      	bne.n	8001a06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d116      	bne.n	8001a06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d8:	4b99      	ldr	r3, [pc, #612]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x328>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e286      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	061b      	lsls	r3, r3, #24
 80019fe:	4990      	ldr	r1, [pc, #576]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a04:	e040      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d023      	beq.n	8001a56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a8b      	ldr	r2, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff facf 	bl	8000fbc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff facb 	bl	8000fbc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e264      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	497c      	ldr	r1, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
 8001a54:	e018      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a79      	ldr	r2, [pc, #484]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff faab 	bl	8000fbc <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff faa7 	bl	8000fbc <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e240      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7c:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa2:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff fa86 	bl	8000fbc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fa82 	bl	8000fbc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e21b      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac6:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ef      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3ec>
 8001ad4:	e01b      	b.n	8001b0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fa69 	bl	8000fbc <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fa65 	bl	8000fbc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1fe      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b00:	4b4f      	ldr	r3, [pc, #316]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ef      	bne.n	8001aee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80a6 	beq.w	8001c68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6593      	str	r3, [r2, #88]	; 0x58
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d118      	bne.n	8001b86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa2c 	bl	8000fbc <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b68:	f7ff fa28 	bl	8000fbc <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1c1      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCC_OscConfig+0x57c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4d8>
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9e:	e024      	b.n	8001bea <HAL_RCC_OscConfig+0x522>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d110      	bne.n	8001bca <HAL_RCC_OscConfig+0x502>
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc8:	e00f      	b.n	8001bea <HAL_RCC_OscConfig+0x522>
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f9e3 	bl	8000fbc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f9df 	bl	8000fbc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e176      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ed      	beq.n	8001bfa <HAL_RCC_OscConfig+0x532>
 8001c1e:	e01a      	b.n	8001c56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9cc 	bl	8000fbc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c26:	e00f      	b.n	8001c48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9c8 	bl	8000fbc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d906      	bls.n	8001c48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e15f      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c48:	4baa      	ldr	r3, [pc, #680]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e8      	bne.n	8001c28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	4aa4      	ldr	r2, [pc, #656]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d03c      	beq.n	8001cee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c7c:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c82:	4a9c      	ldr	r2, [pc, #624]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f996 	bl	8000fbc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c94:	f7ff f992 	bl	8000fbc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e12b      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ca6:	4b93      	ldr	r3, [pc, #588]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ef      	beq.n	8001c94 <HAL_RCC_OscConfig+0x5cc>
 8001cb4:	e01b      	b.n	8001cee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cb6:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cbc:	4a8d      	ldr	r2, [pc, #564]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f979 	bl	8000fbc <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cce:	f7ff f975 	bl	8000fbc <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e10e      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce0:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8102 	beq.w	8001efc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	f040 80c5 	bne.w	8001e8c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d02:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d12c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	3b01      	subs	r3, #1
 8001d22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d123      	bne.n	8001d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d11b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d113      	bne.n	8001d70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	3b01      	subs	r3, #1
 8001d56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d067      	beq.n	8001e40 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d062      	beq.n	8001e3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0bb      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5a      	ldr	r2, [pc, #360]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d92:	f7ff f913 	bl	8000fbc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f90f 	bl	8000fbc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0a8      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <HAL_RCC_OscConfig+0x830>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd2:	0212      	lsls	r2, r2, #8
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dda:	0852      	lsrs	r2, r2, #1
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	0552      	lsls	r2, r2, #21
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de6:	0852      	lsrs	r2, r2, #1
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0652      	lsls	r2, r2, #25
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df2:	06d2      	lsls	r2, r2, #27
 8001df4:	430a      	orrs	r2, r1
 8001df6:	493f      	ldr	r1, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a39      	ldr	r2, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e14:	f7ff f8d2 	bl	8000fbc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ce 	bl	8000fbc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e067      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3a:	e05f      	b.n	8001efc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e05e      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d157      	bne.n	8001efc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e64:	f7ff f8aa 	bl	8000fbc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f8a6 	bl	8000fbc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e03f      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x7a4>
 8001e8a:	e037      	b.n	8001efc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d02d      	beq.n	8001eee <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001eb0:	f023 0303 	bic.w	r3, r3, #3
 8001eb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001ebc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f879 	bl	8000fbc <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff f875 	bl	8000fbc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e00e      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x806>
 8001eec:	e006      	b.n	8001efc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e005      	b.n	8001efe <HAL_RCC_OscConfig+0x836>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0c8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4961      	ldr	r1, [pc, #388]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0b0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d04c      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d121      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e09e      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d115      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e092      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e086      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e07e      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 0203 	bic.w	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	493f      	ldr	r1, [pc, #252]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc2:	f7fe fffb 	bl	8000fbc <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fca:	f7fe fff7 	bl	8000fbc <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e066      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 020c 	and.w	r2, r3, #12
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d1eb      	bne.n	8001fca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	492c      	ldr	r1, [pc, #176]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d210      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	4924      	ldr	r1, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e036      	b.n	80020ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4918      	ldr	r1, [pc, #96]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4910      	ldr	r1, [pc, #64]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207e:	f000 f825 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	fa21 f303 	lsr.w	r3, r1, r3
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ff3a 	bl	8000f1c <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08004a30 	.word	0x08004a30
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d121      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d11e      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d102      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e004      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d101      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d133      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0xa4>
 800216a:	2b03      	cmp	r3, #3
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0xaa>
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002172:	617b      	str	r3, [r7, #20]
      break;
 8002174:	e005      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002178:	617b      	str	r3, [r7, #20]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	617b      	str	r3, [r7, #20]
      break;
 8002180:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	3301      	adds	r3, #1
 800218e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	fb02 f203 	mul.w	r2, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c2:	69bb      	ldr	r3, [r7, #24]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3724      	adds	r7, #36	; 0x24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004a48 	.word	0x08004a48
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	007a1200 	.word	0x007a1200

080021e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021fc:	f7ff fff0 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002200:	4601      	mov	r1, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	08004a40 	.word	0x08004a40

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002228:	f7ff ffda 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 800222c:	4601      	mov	r1, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0adb      	lsrs	r3, r3, #11
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK2Freq+0x28>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	08004a40 	.word	0x08004a40

08002250 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002268:	f7ff f9ca 	bl	8001600 <HAL_PWREx_GetVoltageRange>
 800226c:	6178      	str	r0, [r7, #20]
 800226e:	e014      	b.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002288:	f7ff f9ba 	bl	8001600 <HAL_PWREx_GetVoltageRange>
 800228c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a0:	d10b      	bne.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d919      	bls.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2ba0      	cmp	r3, #160	; 0xa0
 80022ac:	d902      	bls.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ae:	2302      	movs	r3, #2
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e013      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e010      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d902      	bls.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022c0:	2303      	movs	r3, #3
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e00a      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d102      	bne.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022cc:	2302      	movs	r3, #2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e004      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b70      	cmp	r3, #112	; 0x70
 80022d6:	d101      	bne.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d8:	2301      	movs	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 0207 	bic.w	r2, r3, #7
 80022e4:	4909      	ldr	r1, [pc, #36]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40022000 	.word	0x40022000

08002310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002318:	2300      	movs	r3, #0
 800231a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800231c:	2300      	movs	r3, #0
 800231e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02f      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002334:	d005      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002336:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800233a:	d015      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002340:	e00f      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a5c      	ldr	r2, [pc, #368]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234e:	e00c      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fa44 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002360:	e003      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
      break;
 8002366:	e000      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002370:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	494e      	ldr	r1, [pc, #312]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002386:	e001      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 809e 	beq.w	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6593      	str	r3, [r2, #88]	; 0x58
 80023c0:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fdee 	bl	8000fbc <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e2:	e009      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe fdea 	bl	8000fbc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d902      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	74fb      	strb	r3, [r7, #19]
        break;
 80023f6:	e005      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ef      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d15a      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01e      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	429a      	cmp	r2, r3
 8002424:	d019      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002430:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d016      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fdaa 	bl	8000fbc <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	e00b      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fda6 	bl	8000fbc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d902      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	74fb      	strb	r3, [r7, #19]
            break;
 8002482:	e006      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ec      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a6:	4904      	ldr	r1, [pc, #16]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ae:	e009      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
 80024b4:	e006      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c4:	7c7b      	ldrb	r3, [r7, #17]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b9e      	ldr	r3, [pc, #632]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a9d      	ldr	r2, [pc, #628]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024e2:	4b98      	ldr	r3, [pc, #608]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f023 0203 	bic.w	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4994      	ldr	r1, [pc, #592]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002504:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 020c 	bic.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	498c      	ldr	r1, [pc, #560]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002526:	4b87      	ldr	r3, [pc, #540]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	4983      	ldr	r1, [pc, #524]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002548:	4b7e      	ldr	r3, [pc, #504]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	497b      	ldr	r1, [pc, #492]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800256a:	4b76      	ldr	r3, [pc, #472]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4972      	ldr	r1, [pc, #456]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	496a      	ldr	r1, [pc, #424]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	4961      	ldr	r1, [pc, #388]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d0:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	4959      	ldr	r1, [pc, #356]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	4950      	ldr	r1, [pc, #320]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	4948      	ldr	r1, [pc, #288]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002636:	4b43      	ldr	r3, [pc, #268]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002638:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	493f      	ldr	r1, [pc, #252]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d028      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002666:	4937      	ldr	r1, [pc, #220]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800267e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002682:	60d3      	str	r3, [r2, #12]
 8002684:	e011      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800268e:	d10c      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3304      	adds	r3, #4
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f8a4 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d028      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	491f      	ldr	r1, [pc, #124]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e0:	60d3      	str	r3, [r2, #12]
 80026e2:	e011      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f875 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002732:	d109      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a02      	ldr	r2, [pc, #8]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
 8002740:	e014      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002750:	d10c      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f843 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01c      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002796:	d10c      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f820 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027fe:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
       ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002816:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
       ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d044      	beq.n	80028b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e041      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d00c      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0x6e>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d013      	beq.n	8002864 <RCCEx_PLLSAI1_Config+0x80>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d120      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d11d      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e01a      	b.n	8002888 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002862:	e013      	b.n	800288c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002864:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10f      	bne.n	8002890 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002880:	e006      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      break;
 8002886:	e004      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002890:	bf00      	nop
    }

    if(status == HAL_OK)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10d      	bne.n	80028b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002898:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	430b      	orrs	r3, r1
 80028ae:	4944      	ldr	r1, [pc, #272]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d17c      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c6:	f7fe fb79 	bl	8000fbc <HAL_GetTick>
 80028ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028cc:	e009      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028ce:	f7fe fb75 	bl	8000fbc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d902      	bls.n	80028e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	73fb      	strb	r3, [r7, #15]
        break;
 80028e0:	e005      	b.n	80028ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1ef      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d15f      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d110      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	0211      	lsls	r1, r2, #8
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68d2      	ldr	r2, [r2, #12]
 8002910:	06d2      	lsls	r2, r2, #27
 8002912:	430a      	orrs	r2, r1
 8002914:	492a      	ldr	r1, [pc, #168]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
 800291a:	e027      	b.n	800296c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d112      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800292a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	0211      	lsls	r1, r2, #8
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6912      	ldr	r2, [r2, #16]
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0552      	lsls	r2, r2, #21
 800293e:	430a      	orrs	r2, r1
 8002940:	491f      	ldr	r1, [pc, #124]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	610b      	str	r3, [r1, #16]
 8002946:	e011      	b.n	800296c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	0211      	lsls	r1, r2, #8
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6952      	ldr	r2, [r2, #20]
 800295e:	0852      	lsrs	r2, r2, #1
 8002960:	3a01      	subs	r2, #1
 8002962:	0652      	lsls	r2, r2, #25
 8002964:	430a      	orrs	r2, r1
 8002966:	4916      	ldr	r1, [pc, #88]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fb20 	bl	8000fbc <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800297e:	e009      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002980:	f7fe fb1c 	bl	8000fbc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d902      	bls.n	8002994 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	73fb      	strb	r3, [r7, #15]
          break;
 8002992:	e005      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	4904      	ldr	r1, [pc, #16]	; (80029c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e095      	b.n	8002b02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e6:	d009      	beq.n	80029fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
 80029ee:	e005      	b.n	80029fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f900 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a3c:	d902      	bls.n	8002a44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e002      	b.n	8002a4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a52:	d007      	beq.n	8002a64 <HAL_SPI_Init+0xa0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	ea42 0103 	orr.w	r1, r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	f003 0204 	and.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_Transmit+0x22>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e158      	b.n	8002dde <HAL_SPI_Transmit+0x2d4>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b34:	f7fe fa42 	bl	8000fbc <HAL_GetTick>
 8002b38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b4e:	e13d      	b.n	8002dcc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Transmit+0x52>
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b60:	e134      	b.n	8002dcc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d10f      	bne.n	8002bce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d007      	beq.n	8002bec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf4:	d94b      	bls.n	8002c8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0xfa>
 8002bfe:	8afb      	ldrh	r3, [r7, #22]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d13e      	bne.n	8002c82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	1c9a      	adds	r2, r3, #2
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c28:	e02b      	b.n	8002c82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d112      	bne.n	8002c5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c5c:	e011      	b.n	8002c82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c5e:	f7fe f9ad 	bl	8000fbc <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d803      	bhi.n	8002c76 <HAL_SPI_Transmit+0x16c>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d102      	bne.n	8002c7c <HAL_SPI_Transmit+0x172>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c80:	e0a4      	b.n	8002dcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ce      	bne.n	8002c2a <HAL_SPI_Transmit+0x120>
 8002c8c:	e07c      	b.n	8002d88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_Transmit+0x192>
 8002c96:	8afb      	ldrh	r3, [r7, #22]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d170      	bne.n	8002d7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d912      	bls.n	8002ccc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b02      	subs	r3, #2
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cca:	e058      	b.n	8002d7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cf2:	e044      	b.n	8002d7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d12b      	bne.n	8002d5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d912      	bls.n	8002d32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b02      	subs	r3, #2
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d30:	e025      	b.n	8002d7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d58:	e011      	b.n	8002d7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fe f92f 	bl	8000fbc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d803      	bhi.n	8002d72 <HAL_SPI_Transmit+0x268>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x26e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d7c:	e026      	b.n	8002dcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1b5      	bne.n	8002cf4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	6839      	ldr	r1, [r7, #0]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f001 f8bd 	bl	8003f0c <SPI_EndRxTxTransaction>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e000      	b.n	8002dcc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002dca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af02      	add	r7, sp, #8
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Receive+0x44>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10e      	bne.n	8002e2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f910 	bl	8003046 <HAL_SPI_TransmitReceive>
 8002e26:	4603      	mov	r3, r0
 8002e28:	e109      	b.n	800303e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_SPI_Receive+0x52>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e102      	b.n	800303e <HAL_SPI_Receive+0x258>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e40:	f7fe f8bc 	bl	8000fbc <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e56:	e0e9      	b.n	800302c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_SPI_Receive+0x7e>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e68:	e0e0      	b.n	800302c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb4:	d908      	bls.n	8002ec8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e007      	b.n	8002ed8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	d10f      	bne.n	8002f02 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d007      	beq.n	8002f20 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f28:	d867      	bhi.n	8002ffa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2a:	e030      	b.n	8002f8e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d117      	bne.n	8002f6a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f103 020c 	add.w	r2, r3, #12
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe f827 	bl	8000fbc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x19c>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x1a2>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e04e      	b.n	800302c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1c8      	bne.n	8002f2c <HAL_SPI_Receive+0x146>
 8002f9a:	e034      	b.n	8003006 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d115      	bne.n	8002fd6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	b292      	uxth	r2, r2
 8002fb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002fd4:	e011      	b.n	8002ffa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd6:	f7fd fff1 	bl	8000fbc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d803      	bhi.n	8002fee <HAL_SPI_Receive+0x208>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x20e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff8:	e018      	b.n	800302c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ca      	bne.n	8002f9c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 ff26 	bl	8003e5c <SPI_EndRxTransaction>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
 8003028:	e000      	b.n	800302c <HAL_SPI_Receive+0x246>
  }

error :
 800302a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_SPI_TransmitReceive+0x26>
 8003068:	2302      	movs	r3, #2
 800306a:	e1fb      	b.n	8003464 <HAL_SPI_TransmitReceive+0x41e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003074:	f7fd ffa2 	bl	8000fbc <HAL_GetTick>
 8003078:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003080:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003090:	7efb      	ldrb	r3, [r7, #27]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00e      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x6e>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309c:	d106      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x66>
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d003      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030b2:	e1cd      	b.n	8003450 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x80>
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030cc:	e1c0      	b.n	8003450 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d003      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2205      	movs	r2, #5
 80030de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003124:	d802      	bhi.n	800312c <HAL_SPI_TransmitReceive+0xe6>
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d908      	bls.n	800313e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	e007      	b.n	800314e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	d97c      	bls.n	8003270 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x13e>
 800317e:	8a7b      	ldrh	r3, [r7, #18]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d169      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a8:	e056      	b.n	8003258 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d11b      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x1aa>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x1aa>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d113      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d11c      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x1f2>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	b292      	uxth	r2, r2
 8003216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003238:	f7fd fec0 	bl	8000fbc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	429a      	cmp	r2, r3
 8003246:	d807      	bhi.n	8003258 <HAL_SPI_TransmitReceive+0x212>
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d003      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003256:	e0fb      	b.n	8003450 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1a3      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x164>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d19d      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x164>
 800326e:	e0df      	b.n	8003430 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x23a>
 8003278:	8a7b      	ldrh	r3, [r7, #18]
 800327a:	2b01      	cmp	r3, #1
 800327c:	f040 80cb 	bne.w	8003416 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d912      	bls.n	80032b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b02      	subs	r3, #2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ae:	e0b2      	b.n	8003416 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d6:	e09e      	b.n	8003416 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d134      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x30a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02f      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x30a>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d12c      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d912      	bls.n	8003326 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b02      	subs	r3, #2
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003324:	e012      	b.n	800334c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d148      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x3aa>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d042      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d923      	bls.n	80033be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	b292      	uxth	r2, r2
 8003382:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b02      	subs	r3, #2
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d81f      	bhi.n	80033ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	e016      	b.n	80033ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f103 020c 	add.w	r2, r3, #12
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033f0:	f7fd fde4 	bl	8000fbc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <HAL_SPI_TransmitReceive+0x3c2>
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d102      	bne.n	800340e <HAL_SPI_TransmitReceive+0x3c8>
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003414:	e01c      	b.n	8003450 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af5b 	bne.w	80032d8 <HAL_SPI_TransmitReceive+0x292>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f47f af54 	bne.w	80032d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fd69 	bl	8003f0c <SPI_EndRxTxTransaction>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	661a      	str	r2, [r3, #96]	; 0x60
 800344c:	e000      	b.n	8003450 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800344e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d110      	bne.n	80034a8 <HAL_SPI_Receive_IT+0x3c>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348e:	d10b      	bne.n	80034a8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2204      	movs	r2, #4
 8003494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f894 	bl	80035cc <HAL_SPI_TransmitReceive_IT>
 80034a4:	4603      	mov	r3, r0
 80034a6:	e089      	b.n	80035bc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_SPI_Receive_IT+0x4a>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e082      	b.n	80035bc <HAL_SPI_Receive_IT+0x150>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ce:	e070      	b.n	80035b2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Receive_IT+0x70>
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e0:	e067      	b.n	80035b2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2204      	movs	r2, #4
 80034e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003526:	d90b      	bls.n	8003540 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003536:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_SPI_Receive_IT+0x158>)
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
 800353e:	e00a      	b.n	8003556 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800354e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_SPI_Receive_IT+0x15c>)
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d10f      	bne.n	8003580 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800358e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d008      	beq.n	80035b0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e000      	b.n	80035b2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80035b0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08003be5 	.word	0x08003be5
 80035c8:	08003b95 	.word	0x08003b95

080035cc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_TransmitReceive_IT+0x20>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e091      	b.n	8003710 <HAL_SPI_TransmitReceive_IT+0x144>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035fa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003602:	7dbb      	ldrb	r3, [r7, #22]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d00d      	beq.n	8003624 <HAL_SPI_TransmitReceive_IT+0x58>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d106      	bne.n	800361e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_SPI_TransmitReceive_IT+0x52>
 8003618:	7dbb      	ldrb	r3, [r7, #22]
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003622:	e070      	b.n	8003706 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SPI_TransmitReceive_IT+0x6a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    goto error;
 800363a:	e064      	b.n	8003706 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b04      	cmp	r3, #4
 8003646:	d003      	beq.n	8003650 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	887a      	ldrh	r2, [r7, #2]
 8003666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003686:	d906      	bls.n	8003696 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_SPI_TransmitReceive_IT+0x150>)
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a23      	ldr	r2, [pc, #140]	; (8003720 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003692:	651a      	str	r2, [r3, #80]	; 0x50
 8003694:	e005      	b.n	80036a2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <HAL_SPI_TransmitReceive_IT+0x158>)
 800369a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036aa:	d802      	bhi.n	80036b2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d908      	bls.n	80036c4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e007      	b.n	80036d4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036d2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80036e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d008      	beq.n	8003704 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003704:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	08003acf 	.word	0x08003acf
 8003720:	08003b35 	.word	0x08003b35
 8003724:	0800397f 	.word	0x0800397f
 8003728:	08003a3d 	.word	0x08003a3d

0800372c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
    return;
 800376e:	e0d8      	b.n	8003922 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_SPI_IRQHandler+0x66>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	09db      	lsrs	r3, r3, #7
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
    return;
 8003790:	e0c7      	b.n	8003922 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <HAL_SPI_IRQHandler+0x8c>
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80b5 	beq.w	8003922 <HAL_SPI_IRQHandler+0x1f6>
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ae 	beq.w	8003922 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d023      	beq.n	800381a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d011      	beq.n	8003802 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	e00b      	b.n	800381a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]
        return;
 8003818:	e083      	b.n	8003922 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d014      	beq.n	8003850 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00c      	beq.n	8003876 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f043 0208 	orr.w	r2, r3, #8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	2b00      	cmp	r3, #0
 800387c:	d050      	beq.n	8003920 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800388c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_SPI_IRQHandler+0x17e>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d034      	beq.n	8003914 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0203 	bic.w	r2, r2, #3
 80038b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_SPI_IRQHandler+0x1fc>)
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fc91 	bl	80011f6 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_SPI_IRQHandler+0x1fc>)
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fc7b 	bl	80011f6 <HAL_DMA_Abort_IT>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003912:	e003      	b.n	800391c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f813 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800391a:	e000      	b.n	800391e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800391c:	bf00      	nop
    return;
 800391e:	bf00      	nop
 8003920:	bf00      	nop
  }
}
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	08003955 	.word	0x08003955

0800392c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ffe5 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d923      	bls.n	80039da <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	b292      	uxth	r2, r2
 800399e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b02      	subs	r3, #2
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d11f      	bne.n	8003a08 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	e016      	b.n	8003a08 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f103 020c 	add.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fab2 	bl	8003f98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d912      	bls.n	8003a74 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b02      	subs	r3, #2
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a72:	e012      	b.n	8003a9a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d110      	bne.n	8003ac6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa69 	bl	8003f98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa36 	bl	8003f98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d110      	bne.n	8003b8c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa06 	bl	8003f98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f103 020c 	add.w	r2, r3, #12
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa20 	bl	800401c <SPI_CloseRx_ISR>
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9fa 	bl	800401c <SPI_CloseRx_ISR>
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c40:	f7fd f9bc 	bl	8000fbc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c50:	f7fd f9b4 	bl	8000fbc <HAL_GetTick>
 8003c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	015b      	lsls	r3, r3, #5
 8003c5c:	0d1b      	lsrs	r3, r3, #20
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c66:	e054      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d050      	beq.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c70:	f7fd f9a4 	bl	8000fbc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d902      	bls.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13d      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9e:	d111      	bne.n	8003cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	d004      	beq.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d107      	bne.n	8003cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ccc:	d10f      	bne.n	8003cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e017      	b.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d19b      	bne.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000000 	.word	0x20000000

08003d40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d4e:	f7fd f935 	bl	8000fbc <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d5e:	f7fd f92d 	bl	8000fbc <HAL_GetTick>
 8003d62:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00da      	lsls	r2, r3, #3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d7c:	e05f      	b.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d84:	d106      	bne.n	8003d94 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d050      	beq.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9c:	f7fd f90e 	bl	8000fbc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d902      	bls.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d13d      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dca:	d111      	bne.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d004      	beq.n	8003de0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d107      	bne.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df8:	d10f      	bne.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e010      	b.n	8003e50 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d197      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000000 	.word	0x20000000

08003e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e70:	d111      	bne.n	8003e96 <SPI_EndRxTransaction+0x3a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7a:	d004      	beq.n	8003e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d107      	bne.n	8003e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fec5 	bl	8003c30 <SPI_WaitFlagStateUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e023      	b.n	8003f04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec4:	d11d      	bne.n	8003f02 <SPI_EndRxTransaction+0xa6>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d004      	beq.n	8003eda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d113      	bne.n	8003f02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff ff2a 	bl	8003d40 <SPI_WaitFifoStateUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e000      	b.n	8003f04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff0b 	bl	8003d40 <SPI_WaitFifoStateUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e027      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fe70 	bl	8003c30 <SPI_WaitFlagStateUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e014      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fee4 	bl	8003d40 <SPI_WaitFifoStateUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e000      	b.n	8003f90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa0:	f7fd f80c 	bl	8000fbc <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0220 	bic.w	r2, r2, #32
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	2164      	movs	r1, #100	; 0x64
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffa6 	bl	8003f0c <SPI_EndRxTxTransaction>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d115      	bne.n	8004006 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fd90 	bl	8000b14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ff4:	e00e      	b.n	8004014 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fc94 	bl	800392c <HAL_SPI_TxRxCpltCallback>
}
 8004004:	e006      	b.n	8004014 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fc96 	bl	8003940 <HAL_SPI_ErrorCallback>
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004032:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004034:	f7fc ffc2 	bl	8000fbc <HAL_GetTick>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	2164      	movs	r1, #100	; 0x64
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff0c 	bl	8003e5c <SPI_EndRxTransaction>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fd54 	bl	8000b14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800406c:	e002      	b.n	8004074 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fc66 	bl	8003940 <HAL_SPI_ErrorCallback>
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e040      	b.n	8004110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc fe06 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f8c0 	bl	8004240 <UART_SetConfig>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e022      	b.n	8004110 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fb12 	bl	80046fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb99 	bl	8004840 <UART_CheckIdleState>
 800410e:	4603      	mov	r3, r0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412c:	2b20      	cmp	r3, #32
 800412e:	f040 8081 	bne.w	8004234 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_UART_Transmit+0x26>
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e079      	b.n	8004236 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UART_Transmit+0x38>
 800414c:	2302      	movs	r3, #2
 800414e:	e072      	b.n	8004236 <HAL_UART_Transmit+0x11e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	; 0x21
 8004162:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004164:	f7fc ff2a 	bl	8000fbc <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d108      	bne.n	8004196 <HAL_UART_Transmit+0x7e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e003      	b.n	800419e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80041a6:	e02d      	b.n	8004204 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fb89 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e039      	b.n	8004236 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d4:	b292      	uxth	r2, r2
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3302      	adds	r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e008      	b.n	80041f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b292      	uxth	r2, r2
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1cb      	bne.n	80041a8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2200      	movs	r2, #0
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fb55 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e005      	b.n	8004236 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4313      	orrs	r3, r2
 8004264:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4ba4      	ldr	r3, [pc, #656]	; (8004500 <UART_SetConfig+0x2c0>)
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	430b      	orrs	r3, r1
 8004278:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a9a      	ldr	r2, [pc, #616]	; (8004504 <UART_SetConfig+0x2c4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a91      	ldr	r2, [pc, #580]	; (8004508 <UART_SetConfig+0x2c8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d121      	bne.n	800430c <UART_SetConfig+0xcc>
 80042c8:	4b90      	ldr	r3, [pc, #576]	; (800450c <UART_SetConfig+0x2cc>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d816      	bhi.n	8004304 <UART_SetConfig+0xc4>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x9c>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	080042f3 	.word	0x080042f3
 80042e8:	080042ff 	.word	0x080042ff
 80042ec:	2301      	movs	r3, #1
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e0be      	b.n	8004470 <UART_SetConfig+0x230>
 80042f2:	2302      	movs	r3, #2
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e0bb      	b.n	8004470 <UART_SetConfig+0x230>
 80042f8:	2304      	movs	r3, #4
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e0b8      	b.n	8004470 <UART_SetConfig+0x230>
 80042fe:	2308      	movs	r3, #8
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e0b5      	b.n	8004470 <UART_SetConfig+0x230>
 8004304:	2310      	movs	r3, #16
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	bf00      	nop
 800430a:	e0b1      	b.n	8004470 <UART_SetConfig+0x230>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a7f      	ldr	r2, [pc, #508]	; (8004510 <UART_SetConfig+0x2d0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d134      	bne.n	8004380 <UART_SetConfig+0x140>
 8004316:	4b7d      	ldr	r3, [pc, #500]	; (800450c <UART_SetConfig+0x2cc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b0c      	cmp	r3, #12
 8004322:	d829      	bhi.n	8004378 <UART_SetConfig+0x138>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0xec>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004361 	.word	0x08004361
 8004330:	08004379 	.word	0x08004379
 8004334:	08004379 	.word	0x08004379
 8004338:	08004379 	.word	0x08004379
 800433c:	0800436d 	.word	0x0800436d
 8004340:	08004379 	.word	0x08004379
 8004344:	08004379 	.word	0x08004379
 8004348:	08004379 	.word	0x08004379
 800434c:	08004367 	.word	0x08004367
 8004350:	08004379 	.word	0x08004379
 8004354:	08004379 	.word	0x08004379
 8004358:	08004379 	.word	0x08004379
 800435c:	08004373 	.word	0x08004373
 8004360:	2300      	movs	r3, #0
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	e084      	b.n	8004470 <UART_SetConfig+0x230>
 8004366:	2302      	movs	r3, #2
 8004368:	76fb      	strb	r3, [r7, #27]
 800436a:	e081      	b.n	8004470 <UART_SetConfig+0x230>
 800436c:	2304      	movs	r3, #4
 800436e:	76fb      	strb	r3, [r7, #27]
 8004370:	e07e      	b.n	8004470 <UART_SetConfig+0x230>
 8004372:	2308      	movs	r3, #8
 8004374:	76fb      	strb	r3, [r7, #27]
 8004376:	e07b      	b.n	8004470 <UART_SetConfig+0x230>
 8004378:	2310      	movs	r3, #16
 800437a:	76fb      	strb	r3, [r7, #27]
 800437c:	bf00      	nop
 800437e:	e077      	b.n	8004470 <UART_SetConfig+0x230>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <UART_SetConfig+0x2d4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d120      	bne.n	80043cc <UART_SetConfig+0x18c>
 800438a:	4b60      	ldr	r3, [pc, #384]	; (800450c <UART_SetConfig+0x2cc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004394:	2b10      	cmp	r3, #16
 8004396:	d00f      	beq.n	80043b8 <UART_SetConfig+0x178>
 8004398:	2b10      	cmp	r3, #16
 800439a:	d802      	bhi.n	80043a2 <UART_SetConfig+0x162>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <UART_SetConfig+0x16c>
 80043a0:	e010      	b.n	80043c4 <UART_SetConfig+0x184>
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d005      	beq.n	80043b2 <UART_SetConfig+0x172>
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	d009      	beq.n	80043be <UART_SetConfig+0x17e>
 80043aa:	e00b      	b.n	80043c4 <UART_SetConfig+0x184>
 80043ac:	2300      	movs	r3, #0
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e05e      	b.n	8004470 <UART_SetConfig+0x230>
 80043b2:	2302      	movs	r3, #2
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e05b      	b.n	8004470 <UART_SetConfig+0x230>
 80043b8:	2304      	movs	r3, #4
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	e058      	b.n	8004470 <UART_SetConfig+0x230>
 80043be:	2308      	movs	r3, #8
 80043c0:	76fb      	strb	r3, [r7, #27]
 80043c2:	e055      	b.n	8004470 <UART_SetConfig+0x230>
 80043c4:	2310      	movs	r3, #16
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	bf00      	nop
 80043ca:	e051      	b.n	8004470 <UART_SetConfig+0x230>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a51      	ldr	r2, [pc, #324]	; (8004518 <UART_SetConfig+0x2d8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d120      	bne.n	8004418 <UART_SetConfig+0x1d8>
 80043d6:	4b4d      	ldr	r3, [pc, #308]	; (800450c <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d00f      	beq.n	8004404 <UART_SetConfig+0x1c4>
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d802      	bhi.n	80043ee <UART_SetConfig+0x1ae>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <UART_SetConfig+0x1b8>
 80043ec:	e010      	b.n	8004410 <UART_SetConfig+0x1d0>
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d005      	beq.n	80043fe <UART_SetConfig+0x1be>
 80043f2:	2bc0      	cmp	r3, #192	; 0xc0
 80043f4:	d009      	beq.n	800440a <UART_SetConfig+0x1ca>
 80043f6:	e00b      	b.n	8004410 <UART_SetConfig+0x1d0>
 80043f8:	2300      	movs	r3, #0
 80043fa:	76fb      	strb	r3, [r7, #27]
 80043fc:	e038      	b.n	8004470 <UART_SetConfig+0x230>
 80043fe:	2302      	movs	r3, #2
 8004400:	76fb      	strb	r3, [r7, #27]
 8004402:	e035      	b.n	8004470 <UART_SetConfig+0x230>
 8004404:	2304      	movs	r3, #4
 8004406:	76fb      	strb	r3, [r7, #27]
 8004408:	e032      	b.n	8004470 <UART_SetConfig+0x230>
 800440a:	2308      	movs	r3, #8
 800440c:	76fb      	strb	r3, [r7, #27]
 800440e:	e02f      	b.n	8004470 <UART_SetConfig+0x230>
 8004410:	2310      	movs	r3, #16
 8004412:	76fb      	strb	r3, [r7, #27]
 8004414:	bf00      	nop
 8004416:	e02b      	b.n	8004470 <UART_SetConfig+0x230>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a39      	ldr	r2, [pc, #228]	; (8004504 <UART_SetConfig+0x2c4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d124      	bne.n	800446c <UART_SetConfig+0x22c>
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <UART_SetConfig+0x2cc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d012      	beq.n	8004458 <UART_SetConfig+0x218>
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d802      	bhi.n	800443e <UART_SetConfig+0x1fe>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <UART_SetConfig+0x20c>
 800443c:	e012      	b.n	8004464 <UART_SetConfig+0x224>
 800443e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004442:	d006      	beq.n	8004452 <UART_SetConfig+0x212>
 8004444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004448:	d009      	beq.n	800445e <UART_SetConfig+0x21e>
 800444a:	e00b      	b.n	8004464 <UART_SetConfig+0x224>
 800444c:	2300      	movs	r3, #0
 800444e:	76fb      	strb	r3, [r7, #27]
 8004450:	e00e      	b.n	8004470 <UART_SetConfig+0x230>
 8004452:	2302      	movs	r3, #2
 8004454:	76fb      	strb	r3, [r7, #27]
 8004456:	e00b      	b.n	8004470 <UART_SetConfig+0x230>
 8004458:	2304      	movs	r3, #4
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x230>
 800445e:	2308      	movs	r3, #8
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e005      	b.n	8004470 <UART_SetConfig+0x230>
 8004464:	2310      	movs	r3, #16
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	bf00      	nop
 800446a:	e001      	b.n	8004470 <UART_SetConfig+0x230>
 800446c:	2310      	movs	r3, #16
 800446e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <UART_SetConfig+0x2c4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	f040 8085 	bne.w	8004586 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800447c:	7efb      	ldrb	r3, [r7, #27]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d823      	bhi.n	80044ca <UART_SetConfig+0x28a>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x248>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044bb 	.word	0x080044bb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044cb 	.word	0x080044cb
 80044a4:	080044cb 	.word	0x080044cb
 80044a8:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fd fea4 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6178      	str	r0, [r7, #20]
        break;
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <UART_SetConfig+0x2dc>)
 80044b6:	617b      	str	r3, [r7, #20]
        break;
 80044b8:	e00c      	b.n	80044d4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fd fe07 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80044be:	6178      	str	r0, [r7, #20]
        break;
 80044c0:	e008      	b.n	80044d4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	617b      	str	r3, [r7, #20]
        break;
 80044c8:	e004      	b.n	80044d4 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	76bb      	strb	r3, [r7, #26]
        break;
 80044d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8102 	beq.w	80046e0 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4413      	add	r3, r2
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d305      	bcc.n	80044f8 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d913      	bls.n	8004520 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	76bb      	strb	r3, [r7, #26]
 80044fc:	e0f0      	b.n	80046e0 <UART_SetConfig+0x4a0>
 80044fe:	bf00      	nop
 8004500:	efff69f3 	.word	0xefff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f04f 0400 	mov.w	r4, #0
 8004530:	0214      	lsls	r4, r2, #8
 8004532:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004536:	020b      	lsls	r3, r1, #8
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	0852      	lsrs	r2, r2, #1
 800453e:	4611      	mov	r1, r2
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	eb13 0b01 	adds.w	fp, r3, r1
 8004548:	eb44 0c02 	adc.w	ip, r4, r2
 800454c:	4658      	mov	r0, fp
 800454e:	4661      	mov	r1, ip
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f04f 0400 	mov.w	r4, #0
 8004558:	461a      	mov	r2, r3
 800455a:	4623      	mov	r3, r4
 800455c:	f7fb fe3a 	bl	80001d4 <__aeabi_uldivmod>
 8004560:	4603      	mov	r3, r0
 8004562:	460c      	mov	r4, r1
 8004564:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456c:	d308      	bcc.n	8004580 <UART_SetConfig+0x340>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004574:	d204      	bcs.n	8004580 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e0af      	b.n	80046e0 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	76bb      	strb	r3, [r7, #26]
 8004584:	e0ac      	b.n	80046e0 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d15b      	bne.n	8004648 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004590:	7efb      	ldrb	r3, [r7, #27]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d827      	bhi.n	80045e6 <UART_SetConfig+0x3a6>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x35c>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fd fe1a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 80045c4:	6178      	str	r0, [r7, #20]
        break;
 80045c6:	e013      	b.n	80045f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fd fe2c 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 80045cc:	6178      	str	r0, [r7, #20]
        break;
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <UART_SetConfig+0x4b8>)
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e00c      	b.n	80045f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fd fd79 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80045da:	6178      	str	r0, [r7, #20]
        break;
 80045dc:	e008      	b.n	80045f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	617b      	str	r3, [r7, #20]
        break;
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	76bb      	strb	r3, [r7, #26]
        break;
 80045ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d074      	beq.n	80046e0 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005a      	lsls	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	441a      	add	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	b29b      	uxth	r3, r3
 800460c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d916      	bls.n	8004642 <UART_SetConfig+0x402>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d212      	bcs.n	8004642 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f023 030f 	bic.w	r3, r3, #15
 8004624:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b29a      	uxth	r2, r3
 8004632:	89fb      	ldrh	r3, [r7, #14]
 8004634:	4313      	orrs	r3, r2
 8004636:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	89fa      	ldrh	r2, [r7, #14]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e04e      	b.n	80046e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	76bb      	strb	r3, [r7, #26]
 8004646:	e04b      	b.n	80046e0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004648:	7efb      	ldrb	r3, [r7, #27]
 800464a:	2b08      	cmp	r3, #8
 800464c:	d827      	bhi.n	800469e <UART_SetConfig+0x45e>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <UART_SetConfig+0x414>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	0800469f 	.word	0x0800469f
 8004664:	0800468f 	.word	0x0800468f
 8004668:	0800469f 	.word	0x0800469f
 800466c:	0800469f 	.word	0x0800469f
 8004670:	0800469f 	.word	0x0800469f
 8004674:	08004697 	.word	0x08004697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fd fdbe 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 800467c:	6178      	str	r0, [r7, #20]
        break;
 800467e:	e013      	b.n	80046a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004680:	f7fd fdd0 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8004684:	6178      	str	r0, [r7, #20]
        break;
 8004686:	e00f      	b.n	80046a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <UART_SetConfig+0x4b8>)
 800468a:	617b      	str	r3, [r7, #20]
        break;
 800468c:	e00c      	b.n	80046a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7fd fd1d 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8004692:	6178      	str	r0, [r7, #20]
        break;
 8004694:	e008      	b.n	80046a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	617b      	str	r3, [r7, #20]
        break;
 800469c:	e004      	b.n	80046a8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	76bb      	strb	r3, [r7, #26]
        break;
 80046a6:	bf00      	nop
    }

    if (pclk != 0U)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	085a      	lsrs	r2, r3, #1
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	441a      	add	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b0f      	cmp	r3, #15
 80046c8:	d908      	bls.n	80046dc <UART_SetConfig+0x49c>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d204      	bcs.n	80046dc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e001      	b.n	80046e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80046ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80046f8:	00f42400 	.word	0x00f42400

080046fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01a      	beq.n	8004812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d10a      	bne.n	8004812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800484e:	f7fc fbb5 	bl	8000fbc <HAL_GetTick>
 8004852:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d10e      	bne.n	8004880 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f82a 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e020      	b.n	80048c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d10e      	bne.n	80048ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f814 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00a      	b.n	80048c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	e05d      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d059      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	f7fc fb6a 	bl	8000fbc <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d11b      	bne.n	8004932 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004908:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e042      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02b      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494e:	d123      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004968:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e00f      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d092      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4e0d      	ldr	r6, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1ba4      	subs	r4, r4, r6
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2500      	movs	r5, #0
 80049cc:	42a5      	cmp	r5, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4e0b      	ldr	r6, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 f820 	bl	8004a18 <_init>
 80049d8:	1ba4      	subs	r4, r4, r6
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2500      	movs	r5, #0
 80049de:	42a5      	cmp	r5, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049e8:	4798      	blx	r3
 80049ea:	3501      	adds	r5, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049f2:	4798      	blx	r3
 80049f4:	3501      	adds	r5, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08004a80 	.word	0x08004a80
 80049fc:	08004a80 	.word	0x08004a80
 8004a00:	08004a80 	.word	0x08004a80
 8004a04:	08004a84 	.word	0x08004a84

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
