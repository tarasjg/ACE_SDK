
ADXL_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000000c  08004310  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08004310  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddd3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e53  00000000  00000000  0002de0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227d7  00000000  00000000  00031270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c53f  00000000  00000000  00053a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a11  00000000  00000000  0005ff86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e9c  00000000  00000000  001319ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004294 	.word	0x08004294

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004294 	.word	0x08004294

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <reg_read>:
	HAL_SPI_Receive_IT(spi.handle, rx, size);
	return;
}

void reg_read(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	f107 0408 	add.w	r4, r7, #8
 80004d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	4613      	mov	r3, r2
 80004de:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f000 ffbc 	bl	8001478 <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000500:	68b8      	ldr	r0, [r7, #8]
 8000502:	f107 0117 	add.w	r1, r7, #23
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	2201      	movs	r2, #1
 800050c:	f002 fa71 	bl	80029f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, size, HAL_MAX_DELAY);
 8000510:	68b8      	ldr	r0, [r7, #8]
 8000512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000514:	b29a      	uxth	r2, r3
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	f002 fbd7 	bl	8002cce <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	889b      	ldrh	r3, [r3, #4]
 8000528:	4619      	mov	r1, r3
 800052a:	4610      	mov	r0, r2
 800052c:	f000 ffa4 	bl	8001478 <HAL_GPIO_TogglePin>

	return;
 8000530:	bf00      	nop
}
 8000532:	371c      	adds	r7, #28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <reg_write>:

	return;
}

static void reg_write(SPI_Comm spi, uint8_t addr, uint8_t payload)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	f107 0408 	add.w	r4, r7, #8
 8000542:	e884 0003 	stmia.w	r4, {r0, r1}
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	460b      	mov	r3, r1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4613      	mov	r3, r2
 8000550:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[] = {(addr << 1), payload};
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	753b      	strb	r3, [r7, #20]
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	889b      	ldrh	r3, [r3, #4]
 8000566:	4619      	mov	r1, r3
 8000568:	4610      	mov	r0, r2
 800056a:	f000 ff85 	bl	8001478 <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 800056e:	68b8      	ldr	r0, [r7, #8]
 8000570:	f107 0114 	add.w	r1, r7, #20
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	2202      	movs	r2, #2
 800057a:	f002 fa3a 	bl	80029f2 <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	889b      	ldrh	r3, [r3, #4]
 8000586:	4619      	mov	r1, r3
 8000588:	4610      	mov	r0, r2
 800058a:	f000 ff75 	bl	8001478 <HAL_GPIO_TogglePin>

	return;
 800058e:	bf00      	nop
}
 8000590:	371c      	adds	r7, #28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}

08000596 <fifo_init>:


static void fifo_init(SPI_Comm spi, int samples) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80005a4:	607a      	str	r2, [r7, #4]
	uint8_t samples_MSB = samples >> 8;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	121b      	asrs	r3, r3, #8
 80005aa:	75fb      	strb	r3, [r7, #23]
	uint8_t samples_LSB = samples & 0xFF;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	75bb      	strb	r3, [r7, #22]
	uint8_t payload_FIFO_CTL = samples_MSB | 0x02;
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	757b      	strb	r3, [r7, #21]
	reg_write(spi, ADXL372_FIFO_CTL, payload_FIFO_CTL); //0b00000011 -> stream mode; sample MSB
 80005b8:	7d7b      	ldrb	r3, [r7, #21]
 80005ba:	223a      	movs	r2, #58	; 0x3a
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	c903      	ldmia	r1, {r0, r1}
 80005c2:	f7ff ffb9 	bl	8000538 <reg_write>
	reg_write(spi, ADXL372_FIFO_SAMPLES, samples_LSB); //0b1_00000000 -> 256 samples
 80005c6:	7dbb      	ldrb	r3, [r7, #22]
 80005c8:	2239      	movs	r2, #57	; 0x39
 80005ca:	f107 0108 	add.w	r1, r7, #8
 80005ce:	c903      	ldmia	r1, {r0, r1}
 80005d0:	f7ff ffb2 	bl	8000538 <reg_write>
}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <int1_init>:

static void int1_init(SPI_Comm spi) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	463b      	mov	r3, r7
 80005e4:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_write(spi, ADXL372_INT1_MAP, 0x04); //0b00000100 -> INT1 on FIFO Full Condition
 80005e8:	2304      	movs	r3, #4
 80005ea:	223b      	movs	r2, #59	; 0x3b
 80005ec:	4639      	mov	r1, r7
 80005ee:	c903      	ldmia	r1, {r0, r1}
 80005f0:	f7ff ffa2 	bl	8000538 <reg_write>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <stream_start>:

void stream_start(SPI_Comm spi, int samples) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	e883 0003 	stmia.w	r3, {r0, r1}
 800060a:	607a      	str	r2, [r7, #4]
	reg_write(spi, ADXL372_POWER_CTL, 0x00); // set standby mode before changing settings
 800060c:	2300      	movs	r3, #0
 800060e:	223f      	movs	r2, #63	; 0x3f
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	c903      	ldmia	r1, {r0, r1}
 8000616:	f7ff ff8f 	bl	8000538 <reg_write>
	fifo_init(spi, samples);
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000624:	f7ff ffb7 	bl	8000596 <fifo_init>
	int1_init(spi);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000630:	f7ff ffd4 	bl	80005dc <int1_init>

	reg_write(spi, ADXL372_POWER_CTL, 0x03); //full bandwidth mode; HPF/LPF enabled
 8000634:	2303      	movs	r3, #3
 8000636:	223f      	movs	r2, #63	; 0x3f
 8000638:	f107 0108 	add.w	r1, r7, #8
 800063c:	c903      	ldmia	r1, {r0, r1}
 800063e:	f7ff ff7b 	bl	8000538 <reg_write>
	//reg_write(spi, ADXL372_POWER_CTL, 0x22); //instant on mode; high threshold
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <fifo_data>:

void fifo_data(SPI_Comm spi, uint8_t* data, size_t data_size) {
 800064a:	b590      	push	{r4, r7, lr}
 800064c:	b089      	sub	sp, #36	; 0x24
 800064e:	af02      	add	r7, sp, #8
 8000650:	f107 0408 	add.w	r4, r7, #8
 8000654:	e884 0003 	stmia.w	r4, {r0, r1}
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	603b      	str	r3, [r7, #0]
	uint8_t dummy = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	75fb      	strb	r3, [r7, #23]
	reg_read(spi, ADXL372_FIFO_DATA, data, data_size);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2242      	movs	r2, #66	; 0x42
 8000668:	f107 0108 	add.w	r1, r7, #8
 800066c:	c903      	ldmia	r1, {r0, r1}
 800066e:	f7ff ff2d 	bl	80004cc <reg_read>
	reg_read(spi, ADXL372_STATUS_1, &dummy, sizeof(dummy));
 8000672:	f107 0317 	add.w	r3, r7, #23
 8000676:	2201      	movs	r2, #1
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	2204      	movs	r2, #4
 800067c:	f107 0108 	add.w	r1, r7, #8
 8000680:	c903      	ldmia	r1, {r0, r1}
 8000682:	f7ff ff23 	bl	80004cc <reg_read>
}
 8000686:	bf00      	nop
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
	...

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fb90 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f850 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f95e 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f92c 	bl	80008fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006a4:	f000 f8bc 	bl	8000820 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f8f8 	bl	800089c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  // initialize SPI
  chip_select.port = GPIOC;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <main+0x8c>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <main+0x90>)
 80006b0:	601a      	str	r2, [r3, #0]
  chip_select.pin = GPIO_PIN_4;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0x8c>)
 80006b4:	2210      	movs	r2, #16
 80006b6:	809a      	strh	r2, [r3, #4]
  accel_spi.handle = &hspi1;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <main+0x94>)
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <main+0x98>)
 80006bc:	601a      	str	r2, [r3, #0]
  accel_spi.cs = &chip_select;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <main+0x94>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <main+0x8c>)
 80006c2:	605a      	str	r2, [r3, #4]

  fifo_buffer_size = sizeof(fifo_buffer);
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <main+0x9c>)
 80006c6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80006ca:	601a      	str	r2, [r3, #0]

  stream_start(accel_spi, FIFO_SAMPLES);
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <main+0x94>)
 80006ce:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80006d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d6:	f7ff ff91 	bl	80005fc <stream_start>
  fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <main+0x9c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4911      	ldr	r1, [pc, #68]	; (8000724 <main+0x94>)
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <main+0xa0>)
 80006e2:	c903      	ldmia	r1, {r0, r1}
 80006e4:	f7ff ffb1 	bl	800064a <fifo_data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (fifo_read_flag) {
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <main+0xa4>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0fa      	beq.n	80006e8 <main+0x58>
		  fifo_read_flag = 0;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <main+0xa4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	  	  fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0x9c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4909      	ldr	r1, [pc, #36]	; (8000724 <main+0x94>)
 80006fe:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <main+0xa0>)
 8000700:	c903      	ldmia	r1, {r0, r1}
 8000702:	f7ff ffa2 	bl	800064a <fifo_data>
	  	  HAL_UART_Transmit(&huart1, fifo_buffer, fifo_buffer_size, HAL_MAX_DELAY);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <main+0x9c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b29a      	uxth	r2, r3
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	4907      	ldr	r1, [pc, #28]	; (8000730 <main+0xa0>)
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <main+0xa8>)
 8000714:	f003 f940 	bl	8003998 <HAL_UART_Transmit>
	  if (fifo_read_flag) {
 8000718:	e7e6      	b.n	80006e8 <main+0x58>
 800071a:	bf00      	nop
 800071c:	2000049c 	.word	0x2000049c
 8000720:	48000800 	.word	0x48000800
 8000724:	200004a4 	.word	0x200004a4
 8000728:	200004ac 	.word	0x200004ac
 800072c:	20000590 	.word	0x20000590
 8000730:	2000002c 	.word	0x2000002c
 8000734:	20000028 	.word	0x20000028
 8000738:	2000041c 	.word	0x2000041c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b0      	sub	sp, #192	; 0xc0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000746:	2244      	movs	r2, #68	; 0x44
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fd9a 	bl	8004284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2268      	movs	r2, #104	; 0x68
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fd8c 	bl	8004284 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000790:	230a      	movs	r3, #10
 8000792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000796:	2307      	movs	r3, #7
 8000798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fef9 	bl	80015a4 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007b8:	f000 f974 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2303      	movs	r3, #3
 80007c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fb04 	bl	8001de4 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007e2:	f000 f95f 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80007e6:	2303      	movs	r3, #3
 80007e8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fcfb 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000800:	f000 f950 	bl	8000aa4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000804:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000808:	f000 fe76 	bl	80014f8 <HAL_PWREx_ControlVoltageScaling>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000812:	f000 f947 	bl	8000aa4 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	37c0      	adds	r7, #192	; 0xc0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_SPI1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_SPI1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_SPI1_Init+0x74>)
 800082c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x74>)
 800083a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x74>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x74>)
 8000856:	2218      	movs	r2, #24
 8000858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x74>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x74>)
 800087a:	2208      	movs	r2, #8
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_SPI1_Init+0x74>)
 8000880:	f002 f814 	bl	80028ac <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f90b 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200004ac 	.word	0x200004ac
 8000898:	40013000 	.word	0x40013000

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART1_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008e0:	f003 f80c 	bl	80038fc <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f8db 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000041c 	.word	0x2000041c
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART2_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000940:	f002 ffdc 	bl	80038fc <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f8ab 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000510 	.word	0x20000510
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_GPIO_Init+0x110>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x110>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x110>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x110>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x110>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x110>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a31      	ldr	r2, [pc, #196]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_GPIO_Init+0x110>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4826      	ldr	r0, [pc, #152]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009d8:	f000 fd36 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_GPIO_Init+0x118>)
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	481f      	ldr	r0, [pc, #124]	; (8000a70 <MX_GPIO_Init+0x114>)
 80009f2:	f000 fbaf 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_GPIO_Init+0x11c>)
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fba2 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a10:	2310      	movs	r3, #16
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000a28:	f000 fb94 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x11c>)
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0x114>)
 8000a40:	f000 fb88 	bl	8001154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2006      	movs	r0, #6
 8000a4a:	f000 fb0c 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f000 fb25 	bl	800109e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2017      	movs	r0, #23
 8000a5a:	f000 fb04 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a5e:	2017      	movs	r0, #23
 8000a60:	f000 fb1d 	bl	800109e <HAL_NVIC_EnableIRQ>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800
 8000a74:	10210000 	.word	0x10210000
 8000a78:	10110000 	.word	0x10110000

08000a7c <HAL_GPIO_EXTI_Callback>:
}


// ISR for FIFO Full
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	/*
	uint8_t dummy = 0;
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_2, &dummy, sizeof(dummy));
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_1, &dummy, sizeof(dummy));
	*/
	if(GPIO_Pin == GPIO_PIN_0) {
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d102      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0x16>
		fifo_read_flag = 1;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
		//fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
	}

}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000028 	.word	0x20000028

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_SPI_MspInit+0x8c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d130      	bne.n	8000b7c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b24:	6613      	str	r3, [r2, #96]	; 0x60
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_SPI_MspInit+0x90>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	23c2      	movs	r3, #194	; 0xc2
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 faf4 	bl	8001154 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2023      	movs	r0, #35	; 0x23
 8000b72:	f000 fa78 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b76:	2023      	movs	r0, #35	; 0x23
 8000b78:	f000 fa91 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <HAL_UART_MspInit+0xdc>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12a      	bne.n	8000c04 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 faa9 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c02:	e02d      	b.n	8000c60 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d128      	bne.n	8000c60 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0xe0>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fa7a 	bl	8001154 <HAL_GPIO_Init>
}
 8000c60:	bf00      	nop
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40004400 	.word	0x40004400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8d6 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f000 fbed 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000cda:	2080      	movs	r0, #128	; 0x80
 8000cdc:	f000 fbe6 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <SPI1_IRQHandler+0x10>)
 8000cea:	f002 fb33 	bl	8003354 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200004ac 	.word	0x200004ac

08000cf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <SystemInit+0x64>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <SystemInit+0x64>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <SystemInit+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <SystemInit+0x68>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <SystemInit+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0x68>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <SystemInit+0x68>)
 8000d24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemInit+0x68>)
 8000d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SystemInit+0x68>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <SystemInit+0x68>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SystemInit+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x64>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	40021000 	.word	0x40021000

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffc6 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
	ldr	r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fa53 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fc7b 	bl	8000690 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000da0:	08004304 	.word	0x08004304
	ldr	r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000dac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000db0:	20000598 	.word	0x20000598

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_Init+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x3c>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f93e 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f80f 	bl	8000df8 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	e001      	b.n	8000dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de6:	f7ff fe63 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d023      	beq.n	8000e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_InitTick+0x70>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f949 	bl	80010ba <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10f      	bne.n	8000e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d809      	bhi.n	8000e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f913 	bl	8001066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_InitTick+0x74>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e004      	b.n	8000e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e001      	b.n	8000e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000594 	.word	0x20000594

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000594 	.word	0x20000594

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d005      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2204      	movs	r2, #4
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e029      	b.n	800114a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020e 	bic.w	r2, r2, #14
 8001104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 021c 	and.w	r2, r3, #28
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
    }
  }
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	e154      	b.n	800140e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8146 	beq.w	8001408 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d00b      	beq.n	800119c <HAL_GPIO_Init+0x48>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001190:	2b11      	cmp	r3, #17
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b12      	cmp	r3, #18
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0xea>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80a0 	beq.w	8001408 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_GPIO_Init+0x2d8>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_GPIO_Init+0x2d8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6613      	str	r3, [r2, #96]	; 0x60
 80012d4:	4b55      	ldr	r3, [pc, #340]	; (800142c <HAL_GPIO_Init+0x2d8>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e0:	4a53      	ldr	r2, [pc, #332]	; (8001430 <HAL_GPIO_Init+0x2dc>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800130a:	d019      	beq.n	8001340 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a49      	ldr	r2, [pc, #292]	; (8001434 <HAL_GPIO_Init+0x2e0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d013      	beq.n	800133c <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a48      	ldr	r2, [pc, #288]	; (8001438 <HAL_GPIO_Init+0x2e4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00d      	beq.n	8001338 <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_GPIO_Init+0x2e8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x1e0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_GPIO_Init+0x2ec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_GPIO_Init+0x1dc>
 800132c:	2304      	movs	r3, #4
 800132e:	e008      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001330:	2307      	movs	r3, #7
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001334:	2303      	movs	r3, #3
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001340:	2300      	movs	r3, #0
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001352:	4937      	ldr	r1, [pc, #220]	; (8001430 <HAL_GPIO_Init+0x2dc>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001384:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ae:	4a25      	ldr	r2, [pc, #148]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_GPIO_Init+0x2f0>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f aea3 	bne.w	8001164 <HAL_GPIO_Init+0x10>
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	48000400 	.word	0x48000400
 8001438:	48000800 	.word	0x48000800
 800143c:	48000c00 	.word	0x48000c00
 8001440:	48001000 	.word	0x48001000
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43d9      	mvns	r1, r3
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	400b      	ands	r3, r1
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fad6 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001506:	d130      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001514:	d038      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2232      	movs	r2, #50	; 0x32
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153c:	e002      	b.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3b01      	subs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001550:	d102      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f2      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d110      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e00f      	b.n	800158a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d007      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 bc11 	b.w	8001dda <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c2:	4b9e      	ldr	r3, [pc, #632]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80e4 	beq.w	80017a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	f040 808b 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f040 8087 	bne.w	80016fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x64>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e3e8      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_RCC_OscConfig+0x7e>
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001620:	e005      	b.n	800162e <HAL_RCC_OscConfig+0x8a>
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162e:	4293      	cmp	r3, r2
 8001630:	d223      	bcs.n	800167a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd7a 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e3c9      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001646:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7c      	ldr	r2, [pc, #496]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b7a      	ldr	r3, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4977      	ldr	r1, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4972      	ldr	r1, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e025      	b.n	80016c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6f      	ldr	r2, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	496a      	ldr	r1, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4965      	ldr	r1, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd3a 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e389      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c6:	f000 fc6f 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	495a      	ldr	r1, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x29c>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x2a0>)
 80016e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e6:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x2a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb84 	bl	8000df8 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d052      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e36d      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d032      	beq.n	800176c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001712:	f7ff fbc1 	bl	8000e98 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fbbd 	bl	8000e98 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e356      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a3f      	ldr	r2, [pc, #252]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	493a      	ldr	r1, [pc, #232]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001756:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	4935      	ldr	r1, [pc, #212]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
 800176a:	e01a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb8e 	bl	8000e98 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001780:	f7ff fb8a 	bl	8000e98 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e323      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1dc>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d073      	beq.n	8001896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x21c>
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d10b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d063      	beq.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d15f      	bne.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e300      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x24c>
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e01d      	b.n	800182c <HAL_RCC_OscConfig+0x288>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x270>
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x288>
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_RCC_OscConfig+0x298>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x298>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fb30 	bl	8000e98 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183a:	e010      	b.n	800185e <HAL_RCC_OscConfig+0x2ba>
 800183c:	40021000 	.word	0x40021000
 8001840:	080042ac 	.word	0x080042ac
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fb24 	bl	8000e98 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e2bd      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4baf      	ldr	r3, [pc, #700]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x2a8>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fb14 	bl	8000e98 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fb10 	bl	8000e98 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2a9      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	4ba5      	ldr	r3, [pc, #660]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x2d0>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d060      	beq.n	8001964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x310>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d119      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	4b99      	ldr	r3, [pc, #612]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x328>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e286      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b93      	ldr	r3, [pc, #588]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	4990      	ldr	r1, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	e040      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d023      	beq.n	8001932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a8b      	ldr	r2, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff facf 	bl	8000e98 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff facb 	bl	8000e98 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e264      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	497c      	ldr	r1, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001932:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a79      	ldr	r2, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff faab 	bl	8000e98 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff faa7 	bl	8000e98 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e240      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fa86 	bl	8000e98 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fa82 	bl	8000e98 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e21b      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x3ec>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff fa69 	bl	8000e98 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fa65 	bl	8000e98 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1fe      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80a6 	beq.w	8001b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6593      	str	r3, [r2, #88]	; 0x58
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d118      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fa2c 	bl	8000e98 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7ff fa28 	bl	8000e98 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1c1      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x57c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d8>
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7a:	e024      	b.n	8001ac6 <HAL_RCC_OscConfig+0x522>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d110      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x502>
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa4:	e00f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x522>
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001abe:	f023 0304 	bic.w	r3, r3, #4
 8001ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff f9e3 	bl	8000e98 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff f9df 	bl	8000e98 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e176      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x578>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ed      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x532>
 8001afa:	e01a      	b.n	8001b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f9cc 	bl	8000e98 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b02:	e00f      	b.n	8001b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f9c8 	bl	8000e98 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d906      	bls.n	8001b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e15f      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	4baa      	ldr	r3, [pc, #680]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e8      	bne.n	8001b04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4ba5      	ldr	r3, [pc, #660]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4aa4      	ldr	r2, [pc, #656]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03c      	beq.n	8001bca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b58:	4b9d      	ldr	r3, [pc, #628]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5e:	4a9c      	ldr	r2, [pc, #624]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f996 	bl	8000e98 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b70:	f7ff f992 	bl	8000e98 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e12b      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b82:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ef      	beq.n	8001b70 <HAL_RCC_OscConfig+0x5cc>
 8001b90:	e01b      	b.n	8001bca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b92:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b98:	4a8d      	ldr	r2, [pc, #564]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f979 	bl	8000e98 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff f975 	bl	8000e98 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e10e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8102 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 80c5 	bne.w	8001d68 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d12c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d123      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d11b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d113      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d067      	beq.n	8001d1c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d062      	beq.n	8001d18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0bb      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c6e:	f7ff f913 	bl	8000e98 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff f90f 	bl	8000e98 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0a8      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_RCC_OscConfig+0x830>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cae:	0212      	lsls	r2, r2, #8
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0552      	lsls	r2, r2, #21
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0652      	lsls	r2, r2, #25
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cce:	06d2      	lsls	r2, r2, #27
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	493f      	ldr	r1, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a39      	ldr	r2, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf0:	f7ff f8d2 	bl	8000e98 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f8ce 	bl	8000e98 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e067      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d16:	e05f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e05e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d157      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d40:	f7ff f8aa 	bl	8000e98 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff f8a6 	bl	8000e98 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e03f      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x7a4>
 8001d66:	e037      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d02d      	beq.n	8001dca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d78:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	f023 0303 	bic.w	r3, r3, #3
 8001d90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001d98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f879 	bl	8000e98 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f875 	bl	8000e98 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00e      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x806>
 8001dc8:	e006      	b.n	8001dd8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e005      	b.n	8001dda <HAL_RCC_OscConfig+0x836>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0c8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4961      	ldr	r1, [pc, #388]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d04c      	beq.n	8001ece <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d121      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e09e      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d115      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e092      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e086      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e07e      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 0203 	bic.w	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	493f      	ldr	r1, [pc, #252]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fffb 	bl	8000e98 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f7fe fff7 	bl	8000e98 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e066      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 020c 	and.w	r2, r3, #12
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d1eb      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	492c      	ldr	r1, [pc, #176]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d210      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4924      	ldr	r1, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e036      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4918      	ldr	r1, [pc, #96]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4910      	ldr	r1, [pc, #64]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f000 f825 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_ClockConfig+0x1b4>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff3a 	bl	8000df8 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f88:	7afb      	ldrb	r3, [r7, #11]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	080042ac 	.word	0x080042ac
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x34>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d121      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d11e      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10d      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d102      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e004      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d101      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_GetSysClockFreq+0x114>)
 800202e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d134      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0xa6>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d003      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0xac>
 800204c:	e005      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002050:	617b      	str	r3, [r7, #20]
      break;
 8002052:	e005      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002056:	617b      	str	r3, [r7, #20]
      break;
 8002058:	e002      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	fb02 f203 	mul.w	r2, r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0e5b      	lsrs	r3, r3, #25
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	3301      	adds	r3, #1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020a0:	69bb      	ldr	r3, [r7, #24]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	080042c4 	.word	0x080042c4
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	080042bc 	.word	0x080042bc

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002108:	f7ff ffda 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCC_GetPCLK2Freq+0x28>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	080042bc 	.word	0x080042bc

08002130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002148:	f7ff f9c8 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 800214c:	6178      	str	r0, [r7, #20]
 800214e:	e014      	b.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002168:	f7ff f9b8 	bl	80014dc <HAL_PWREx_GetVoltageRange>
 800216c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002180:	d10b      	bne.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d919      	bls.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2ba0      	cmp	r3, #160	; 0xa0
 800218c:	d902      	bls.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800218e:	2302      	movs	r3, #2
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e013      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e010      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d902      	bls.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a0:	2303      	movs	r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e00a      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d102      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e004      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b70      	cmp	r3, #112	; 0x70
 80021b6:	d101      	bne.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b8:	2301      	movs	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4909      	ldr	r1, [pc, #36]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021f8:	2300      	movs	r3, #0
 80021fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002214:	d01a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002216:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800221a:	d814      	bhi.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002224:	d10f      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002232:	e00c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa44 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002244:	e003      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	74fb      	strb	r3, [r7, #19]
      break;
 800224a:	e000      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800224c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	494e      	ldr	r1, [pc, #312]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800226a:	e001      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 809e 	beq.w	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	4a3f      	ldr	r2, [pc, #252]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	; 0x58
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b0:	2301      	movs	r3, #1
 80022b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a39      	ldr	r2, [pc, #228]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fdea 	bl	8000e98 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c6:	e009      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fde6 	bl	8000e98 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d902      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	74fb      	strb	r3, [r7, #19]
        break;
 80022da:	e005      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d15a      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01e      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	429a      	cmp	r2, r3
 8002308:	d019      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002314:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	4a1f      	ldr	r2, [pc, #124]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fda6 	bl	8000e98 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234e:	e00b      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fda2 	bl	8000e98 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d902      	bls.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	74fb      	strb	r3, [r7, #19]
            break;
 8002366:	e006      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ec      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238a:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002392:	e009      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
 8002398:	e006      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a8:	7c7b      	ldrb	r3, [r7, #17]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	4a9d      	ldr	r2, [pc, #628]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c6:	4b98      	ldr	r3, [pc, #608]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 0203 	bic.w	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4994      	ldr	r1, [pc, #592]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 020c 	bic.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	498c      	ldr	r1, [pc, #560]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800240a:	4b87      	ldr	r3, [pc, #540]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	4983      	ldr	r1, [pc, #524]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800242c:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	497b      	ldr	r1, [pc, #492]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4972      	ldr	r1, [pc, #456]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	496a      	ldr	r1, [pc, #424]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002492:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	4961      	ldr	r1, [pc, #388]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	4959      	ldr	r1, [pc, #356]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d6:	4b54      	ldr	r3, [pc, #336]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	4950      	ldr	r1, [pc, #320]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	4948      	ldr	r1, [pc, #288]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800251c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002520:	f023 0203 	bic.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	493f      	ldr	r1, [pc, #252]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d028      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255a:	d106      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a31      	ldr	r2, [pc, #196]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002566:	60d3      	str	r3, [r2, #12]
 8002568:	e011      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002572:	d10c      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8a4 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d028      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	491f      	ldr	r1, [pc, #124]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c4:	60d3      	str	r3, [r2, #12]
 80025c6:	e011      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f875 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02b      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002616:	d109      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a02      	ldr	r2, [pc, #8]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	60d3      	str	r3, [r2, #12]
 8002624:	e014      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002634:	d10c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f843 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267a:	d10c      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	2102      	movs	r1, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f820 	bl	80026c8 <RCCEx_PLLSAI1_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000

080026c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d6:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026e2:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0203 	and.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
       ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
       ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d047      	beq.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e044      	b.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d018      	beq.n	800274e <RCCEx_PLLSAI1_Config+0x86>
 800271c:	2b03      	cmp	r3, #3
 800271e:	d825      	bhi.n	800276c <RCCEx_PLLSAI1_Config+0xa4>
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <RCCEx_PLLSAI1_Config+0x62>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d009      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x74>
 8002728:	e020      	b.n	800276c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11d      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273a:	e01a      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800273c:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e013      	b.n	8002776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800274e:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800276a:	e006      	b.n	800277a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      break;
 8002770:	e004      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002772:	bf00      	nop
 8002774:	e002      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002776:	bf00      	nop
 8002778:	e000      	b.n	800277c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277a:	bf00      	nop
    }

    if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	430b      	orrs	r3, r1
 8002798:	4943      	ldr	r1, [pc, #268]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d17c      	bne.n	800289e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3f      	ldr	r2, [pc, #252]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7fe fb72 	bl	8000e98 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b6:	e009      	b.n	80027cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b8:	f7fe fb6e 	bl	8000e98 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d902      	bls.n	80027cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ca:	e005      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ef      	bne.n	80027b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d15f      	bne.n	800289e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d110      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	0211      	lsls	r1, r2, #8
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	06d2      	lsls	r2, r2, #27
 80027fc:	430a      	orrs	r2, r1
 80027fe:	492a      	ldr	r1, [pc, #168]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	610b      	str	r3, [r1, #16]
 8002804:	e027      	b.n	8002856 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d112      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800280c:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6892      	ldr	r2, [r2, #8]
 800281c:	0211      	lsls	r1, r2, #8
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6912      	ldr	r2, [r2, #16]
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	3a01      	subs	r2, #1
 8002826:	0552      	lsls	r2, r2, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	491f      	ldr	r1, [pc, #124]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	610b      	str	r3, [r1, #16]
 8002830:	e011      	b.n	8002856 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800283a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	0211      	lsls	r1, r2, #8
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6952      	ldr	r2, [r2, #20]
 8002848:	0852      	lsrs	r2, r2, #1
 800284a:	3a01      	subs	r2, #1
 800284c:	0652      	lsls	r2, r2, #25
 800284e:	430a      	orrs	r2, r1
 8002850:	4915      	ldr	r1, [pc, #84]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002860:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fb19 	bl	8000e98 <HAL_GetTick>
 8002866:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002868:	e009      	b.n	800287e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800286a:	f7fe fb15 	bl	8000e98 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	73fb      	strb	r3, [r7, #15]
          break;
 800287c:	e005      	b.n	800288a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ef      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e095      	b.n	80029ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ce:	d009      	beq.n	80028e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
 80028d6:	e005      	b.n	80028e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f8fa 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002924:	d902      	bls.n	800292c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e002      	b.n	8002932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800293a:	d007      	beq.n	800294c <HAL_SPI_Init+0xa0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002944:	d002      	beq.n	800294c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	ea42 0103 	orr.w	r1, r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	0c1b      	lsrs	r3, r3, #16
 80029a8:	f003 0204 	and.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029c8:	ea42 0103 	orr.w	r1, r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b088      	sub	sp, #32
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_SPI_Transmit+0x22>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e158      	b.n	8002cc6 <HAL_SPI_Transmit+0x2d4>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a1c:	f7fe fa3c 	bl	8000e98 <HAL_GetTick>
 8002a20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a36:	e13d      	b.n	8002cb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_SPI_Transmit+0x52>
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a48:	e134      	b.n	8002cb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a94:	d10f      	bne.n	8002ab6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d007      	beq.n	8002ad4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002adc:	d94b      	bls.n	8002b76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0xfa>
 8002ae6:	8afb      	ldrh	r3, [r7, #22]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d13e      	bne.n	8002b6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	1c9a      	adds	r2, r3, #2
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b10:	e02b      	b.n	8002b6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d112      	bne.n	8002b46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b44:	e011      	b.n	8002b6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b46:	f7fe f9a7 	bl	8000e98 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d803      	bhi.n	8002b5e <HAL_SPI_Transmit+0x16c>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d102      	bne.n	8002b64 <HAL_SPI_Transmit+0x172>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b68:	e0a4      	b.n	8002cb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ce      	bne.n	8002b12 <HAL_SPI_Transmit+0x120>
 8002b74:	e07c      	b.n	8002c70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Transmit+0x192>
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d170      	bne.n	8002c66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d912      	bls.n	8002bb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b02      	subs	r3, #2
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bb2:	e058      	b.n	8002c66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002bda:	e044      	b.n	8002c66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d12b      	bne.n	8002c42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d912      	bls.n	8002c1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b02      	subs	r3, #2
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c18:	e025      	b.n	8002c66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c40:	e011      	b.n	8002c66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c42:	f7fe f929 	bl	8000e98 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d803      	bhi.n	8002c5a <HAL_SPI_Transmit+0x268>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d102      	bne.n	8002c60 <HAL_SPI_Transmit+0x26e>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c64:	e026      	b.n	8002cb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1b5      	bne.n	8002bdc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fdfb 	bl	8003870 <SPI_EndRxTxTransaction>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e000      	b.n	8002cb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b088      	sub	sp, #32
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cea:	d112      	bne.n	8002d12 <HAL_SPI_Receive+0x44>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10e      	bne.n	8002d12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f910 	bl	8002f2e <HAL_SPI_TransmitReceive>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	e109      	b.n	8002f26 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_SPI_Receive+0x52>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e102      	b.n	8002f26 <HAL_SPI_Receive+0x258>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d28:	f7fe f8b6 	bl	8000e98 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d3e:	e0e9      	b.n	8002f14 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Receive+0x7e>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d50:	e0e0      	b.n	8002f14 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2204      	movs	r2, #4
 8002d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d9c:	d908      	bls.n	8002db0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	e007      	b.n	8002dc0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc8:	d10f      	bne.n	8002dea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d007      	beq.n	8002e08 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e10:	d867      	bhi.n	8002ee2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e12:	e030      	b.n	8002e76 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d117      	bne.n	8002e52 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f103 020c 	add.w	r2, r3, #12
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e50:	e011      	b.n	8002e76 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e52:	f7fe f821 	bl	8000e98 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d803      	bhi.n	8002e6a <HAL_SPI_Receive+0x19c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d102      	bne.n	8002e70 <HAL_SPI_Receive+0x1a2>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e74:	e04e      	b.n	8002f14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1c8      	bne.n	8002e14 <HAL_SPI_Receive+0x146>
 8002e82:	e034      	b.n	8002eee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d115      	bne.n	8002ebe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ebc:	e011      	b.n	8002ee2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ebe:	f7fd ffeb 	bl	8000e98 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d803      	bhi.n	8002ed6 <HAL_SPI_Receive+0x208>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d102      	bne.n	8002edc <HAL_SPI_Receive+0x20e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ee0:	e018      	b.n	8002f14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ca      	bne.n	8002e84 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fc64 	bl	80037c0 <SPI_EndRxTransaction>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
 8002f10:	e000      	b.n	8002f14 <HAL_SPI_Receive+0x246>
  }

error :
 8002f12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	; 0x28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x26>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e1fb      	b.n	800334c <HAL_SPI_TransmitReceive+0x41e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f5c:	f7fd ff9c 	bl	8000e98 <HAL_GetTick>
 8002f60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f78:	7efb      	ldrb	r3, [r7, #27]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00e      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x6e>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f84:	d106      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x66>
 8002f8e:	7efb      	ldrb	r3, [r7, #27]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d003      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f9a:	e1cd      	b.n	8003338 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x80>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x80>
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fb4:	e1c0      	b.n	8003338 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	887a      	ldrh	r2, [r7, #2]
 8002ff6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800300c:	d802      	bhi.n	8003014 <HAL_SPI_TransmitReceive+0xe6>
 800300e:	8a3b      	ldrh	r3, [r7, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d908      	bls.n	8003026 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	e007      	b.n	8003036 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d007      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800305c:	d97c      	bls.n	8003158 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_SPI_TransmitReceive+0x13e>
 8003066:	8a7b      	ldrh	r3, [r7, #18]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d169      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003090:	e056      	b.n	8003140 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d11b      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x1aa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x1aa>
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d113      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	1c9a      	adds	r2, r3, #2
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d11c      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x1f2>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	b292      	uxth	r2, r2
 80030fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003120:	f7fd feba 	bl	8000e98 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312c:	429a      	cmp	r2, r3
 800312e:	d807      	bhi.n	8003140 <HAL_SPI_TransmitReceive+0x212>
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d003      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800313e:	e0fb      	b.n	8003338 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1a3      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x164>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d19d      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x164>
 8003156:	e0df      	b.n	8003318 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_SPI_TransmitReceive+0x23a>
 8003160:	8a7b      	ldrh	r3, [r7, #18]
 8003162:	2b01      	cmp	r3, #1
 8003164:	f040 80cb 	bne.w	80032fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d912      	bls.n	8003198 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b02      	subs	r3, #2
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003196:	e0b2      	b.n	80032fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031be:	e09e      	b.n	80032fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d134      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x30a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x30a>
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d12c      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d912      	bls.n	800320e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	1c9a      	adds	r2, r3, #2
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b02      	subs	r3, #2
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800320c:	e012      	b.n	8003234 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d148      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x3aa>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d042      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d923      	bls.n	80032a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	b292      	uxth	r2, r2
 800326a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b02      	subs	r3, #2
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d81f      	bhi.n	80032d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e016      	b.n	80032d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f103 020c 	add.w	r2, r3, #12
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d4:	2301      	movs	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d8:	f7fd fdde 	bl	8000e98 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d803      	bhi.n	80032f0 <HAL_SPI_TransmitReceive+0x3c2>
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x3c8>
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032fc:	e01c      	b.n	8003338 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f af5b 	bne.w	80031c0 <HAL_SPI_TransmitReceive+0x292>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	f47f af54 	bne.w	80031c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 faa7 	bl	8003870 <SPI_EndRxTxTransaction>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	661a      	str	r2, [r3, #96]	; 0x60
 8003334:	e000      	b.n	8003338 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003336:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10f      	bne.n	8003398 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    return;
 8003396:	e0d7      	b.n	8003548 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_SPI_IRQHandler+0x66>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	09db      	lsrs	r3, r3, #7
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
    return;
 80033b8:	e0c6      	b.n	8003548 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_SPI_IRQHandler+0x8c>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80b4 	beq.w	8003548 <HAL_SPI_IRQHandler+0x1f4>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80ad 	beq.w	8003548 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d023      	beq.n	8003442 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b03      	cmp	r3, #3
 8003404:	d011      	beq.n	800342a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	f043 0204 	orr.w	r2, r3, #4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	e00b      	b.n	8003442 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
        return;
 8003440:	e082      	b.n	8003548 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d014      	beq.n	8003478 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	f043 0208 	orr.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04f      	beq.n	8003546 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_SPI_IRQHandler+0x17e>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d034      	beq.n	800353c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0203 	bic.w	r2, r2, #3
 80034e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_SPI_IRQHandler+0x1fc>)
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fdeb 	bl	80010d2 <HAL_DMA_Abort_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_SPI_IRQHandler+0x1fc>)
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fdd5 	bl	80010d2 <HAL_DMA_Abort_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800353a:	e003      	b.n	8003544 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f809 	bl	8003554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003542:	e000      	b.n	8003546 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003544:	bf00      	nop
    return;
 8003546:	bf00      	nop
  }
}
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	08003569 	.word	0x08003569

08003554 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff ffe5 	bl	8003554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035a4:	f7fd fc78 	bl	8000e98 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035b4:	f7fd fc70 	bl	8000e98 <HAL_GetTick>
 80035b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	0d1b      	lsrs	r3, r3, #20
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ca:	e054      	b.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d050      	beq.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d4:	f7fd fc60 	bl	8000e98 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d902      	bls.n	80035ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d13d      	bne.n	8003666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003602:	d111      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	d004      	beq.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003616:	d107      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003630:	d10f      	bne.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e017      	b.n	8003696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3b01      	subs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	429a      	cmp	r2, r3
 8003692:	d19b      	bne.n	80035cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000000 	.word	0x20000000

080036a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036b2:	f7fd fbf1 	bl	8000e98 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036c2:	f7fd fbe9 	bl	8000e98 <HAL_GetTick>
 80036c6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036c8:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <SPI_WaitFifoStateUntilTimeout+0x118>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00da      	lsls	r2, r3, #3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	0d1b      	lsrs	r3, r3, #20
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80036e0:	e05f      	b.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036e8:	d106      	bne.n	80036f8 <SPI_WaitFifoStateUntilTimeout+0x54>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d050      	beq.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003700:	f7fd fbca 	bl	8000e98 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	429a      	cmp	r2, r3
 800370e:	d902      	bls.n	8003716 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d13d      	bne.n	8003792 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d111      	bne.n	8003754 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003738:	d004      	beq.n	8003744 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d107      	bne.n	8003754 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d10f      	bne.n	800377e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800377c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e010      	b.n	80037b4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3b01      	subs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d197      	bne.n	80036e2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000000 	.word	0x20000000

080037c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d4:	d111      	bne.n	80037fa <SPI_EndRxTransaction+0x3a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037de:	d004      	beq.n	80037ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d107      	bne.n	80037fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fec5 	bl	8003594 <SPI_WaitFlagStateUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e023      	b.n	8003868 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003828:	d11d      	bne.n	8003866 <SPI_EndRxTransaction+0xa6>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d004      	beq.n	800383e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d113      	bne.n	8003866 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2200      	movs	r2, #0
 8003846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ff2a 	bl	80036a4 <SPI_WaitFifoStateUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e000      	b.n	8003868 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff0b 	bl	80036a4 <SPI_WaitFifoStateUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e027      	b.n	80038f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fe70 	bl	8003594 <SPI_WaitFlagStateUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e014      	b.n	80038f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff fee4 	bl	80036a4 <SPI_WaitFifoStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e000      	b.n	80038f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e040      	b.n	8003990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd f934 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8c0 	bl	8003ac0 <UART_SetConfig>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e022      	b.n	8003990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fb10 	bl	8003f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb97 	bl	80040bc <UART_CheckIdleState>
 800398e:	4603      	mov	r3, r0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	f040 8081 	bne.w	8003ab4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e079      	b.n	8003ab6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Transmit+0x38>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e072      	b.n	8003ab6 <HAL_UART_Transmit+0x11e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2221      	movs	r2, #33	; 0x21
 80039e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039e4:	f7fd fa58 	bl	8000e98 <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a02:	d108      	bne.n	8003a16 <HAL_UART_Transmit+0x7e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e003      	b.n	8003a1e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003a26:	e02d      	b.n	8003a84 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb87 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e039      	b.n	8003ab6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a54:	b292      	uxth	r2, r2
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e008      	b.n	8003a72 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1cb      	bne.n	8003a28 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fb53 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e005      	b.n	8003ab6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4ba4      	ldr	r3, [pc, #656]	; (8003d7c <UART_SetConfig+0x2bc>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	69f9      	ldr	r1, [r7, #28]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a99      	ldr	r2, [pc, #612]	; (8003d80 <UART_SetConfig+0x2c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a90      	ldr	r2, [pc, #576]	; (8003d84 <UART_SetConfig+0x2c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d121      	bne.n	8003b8a <UART_SetConfig+0xca>
 8003b46:	4b90      	ldr	r3, [pc, #576]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d817      	bhi.n	8003b84 <UART_SetConfig+0xc4>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x9c>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b79 	.word	0x08003b79
 8003b64:	08003b73 	.word	0x08003b73
 8003b68:	08003b7f 	.word	0x08003b7f
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e0bc      	b.n	8003cec <UART_SetConfig+0x22c>
 8003b72:	2302      	movs	r3, #2
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e0b9      	b.n	8003cec <UART_SetConfig+0x22c>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e0b6      	b.n	8003cec <UART_SetConfig+0x22c>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	76fb      	strb	r3, [r7, #27]
 8003b82:	e0b3      	b.n	8003cec <UART_SetConfig+0x22c>
 8003b84:	2310      	movs	r3, #16
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e0b0      	b.n	8003cec <UART_SetConfig+0x22c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7f      	ldr	r2, [pc, #508]	; (8003d8c <UART_SetConfig+0x2cc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d132      	bne.n	8003bfa <UART_SetConfig+0x13a>
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d828      	bhi.n	8003bf4 <UART_SetConfig+0x134>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0xe8>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003bf5 	.word	0x08003bf5
 8003bb0:	08003bf5 	.word	0x08003bf5
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003be3 	.word	0x08003be3
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bf5 	.word	0x08003bf5
 8003bd8:	08003bef 	.word	0x08003bef
 8003bdc:	2300      	movs	r3, #0
 8003bde:	76fb      	strb	r3, [r7, #27]
 8003be0:	e084      	b.n	8003cec <UART_SetConfig+0x22c>
 8003be2:	2302      	movs	r3, #2
 8003be4:	76fb      	strb	r3, [r7, #27]
 8003be6:	e081      	b.n	8003cec <UART_SetConfig+0x22c>
 8003be8:	2304      	movs	r3, #4
 8003bea:	76fb      	strb	r3, [r7, #27]
 8003bec:	e07e      	b.n	8003cec <UART_SetConfig+0x22c>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	76fb      	strb	r3, [r7, #27]
 8003bf2:	e07b      	b.n	8003cec <UART_SetConfig+0x22c>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e078      	b.n	8003cec <UART_SetConfig+0x22c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a64      	ldr	r2, [pc, #400]	; (8003d90 <UART_SetConfig+0x2d0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0x186>
 8003c04:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c0e:	2b30      	cmp	r3, #48	; 0x30
 8003c10:	d013      	beq.n	8003c3a <UART_SetConfig+0x17a>
 8003c12:	2b30      	cmp	r3, #48	; 0x30
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x180>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x16e>
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d810      	bhi.n	8003c40 <UART_SetConfig+0x180>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x168>
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x174>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x180>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e05e      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	76fb      	strb	r3, [r7, #27]
 8003c32:	e05b      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c34:	2304      	movs	r3, #4
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e058      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	76fb      	strb	r3, [r7, #27]
 8003c3e:	e055      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c40:	2310      	movs	r3, #16
 8003c42:	76fb      	strb	r3, [r7, #27]
 8003c44:	e052      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <UART_SetConfig+0x2d4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d120      	bne.n	8003c92 <UART_SetConfig+0x1d2>
 8003c50:	4b4d      	ldr	r3, [pc, #308]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c5c:	d013      	beq.n	8003c86 <UART_SetConfig+0x1c6>
 8003c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c60:	d814      	bhi.n	8003c8c <UART_SetConfig+0x1cc>
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x1ba>
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d810      	bhi.n	8003c8c <UART_SetConfig+0x1cc>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <UART_SetConfig+0x1b4>
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d006      	beq.n	8003c80 <UART_SetConfig+0x1c0>
 8003c72:	e00b      	b.n	8003c8c <UART_SetConfig+0x1cc>
 8003c74:	2300      	movs	r3, #0
 8003c76:	76fb      	strb	r3, [r7, #27]
 8003c78:	e038      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	76fb      	strb	r3, [r7, #27]
 8003c7e:	e035      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c80:	2304      	movs	r3, #4
 8003c82:	76fb      	strb	r3, [r7, #27]
 8003c84:	e032      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c86:	2308      	movs	r3, #8
 8003c88:	76fb      	strb	r3, [r7, #27]
 8003c8a:	e02f      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	76fb      	strb	r3, [r7, #27]
 8003c90:	e02c      	b.n	8003cec <UART_SetConfig+0x22c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <UART_SetConfig+0x2c0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d125      	bne.n	8003ce8 <UART_SetConfig+0x228>
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <UART_SetConfig+0x2c8>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003caa:	d017      	beq.n	8003cdc <UART_SetConfig+0x21c>
 8003cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb0:	d817      	bhi.n	8003ce2 <UART_SetConfig+0x222>
 8003cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb6:	d00b      	beq.n	8003cd0 <UART_SetConfig+0x210>
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d811      	bhi.n	8003ce2 <UART_SetConfig+0x222>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <UART_SetConfig+0x20a>
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d006      	beq.n	8003cd6 <UART_SetConfig+0x216>
 8003cc8:	e00b      	b.n	8003ce2 <UART_SetConfig+0x222>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	76fb      	strb	r3, [r7, #27]
 8003cce:	e00d      	b.n	8003cec <UART_SetConfig+0x22c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	e00a      	b.n	8003cec <UART_SetConfig+0x22c>
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	76fb      	strb	r3, [r7, #27]
 8003cda:	e007      	b.n	8003cec <UART_SetConfig+0x22c>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e004      	b.n	8003cec <UART_SetConfig+0x22c>
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e001      	b.n	8003cec <UART_SetConfig+0x22c>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <UART_SetConfig+0x2c0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	f040 8084 	bne.w	8003e00 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf8:	7efb      	ldrb	r3, [r7, #27]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d823      	bhi.n	8003d46 <UART_SetConfig+0x286>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x244>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d37 	.word	0x08003d37
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d47 	.word	0x08003d47
 8003d24:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe f9d6 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	6178      	str	r0, [r7, #20]
        break;
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <UART_SetConfig+0x2d8>)
 8003d32:	617b      	str	r3, [r7, #20]
        break;
 8003d34:	e00c      	b.n	8003d50 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe f937 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8003d3a:	6178      	str	r0, [r7, #20]
        break;
 8003d3c:	e008      	b.n	8003d50 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	617b      	str	r3, [r7, #20]
        break;
 8003d44:	e004      	b.n	8003d50 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8102 	beq.w	8003f5c <UART_SetConfig+0x49c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d305      	bcc.n	8003d74 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d913      	bls.n	8003d9c <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	76bb      	strb	r3, [r7, #26]
 8003d78:	e0f0      	b.n	8003f5c <UART_SetConfig+0x49c>
 8003d7a:	bf00      	nop
 8003d7c:	efff69f3 	.word	0xefff69f3
 8003d80:	40008000 	.word	0x40008000
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40004400 	.word	0x40004400
 8003d90:	40004800 	.word	0x40004800
 8003d94:	40004c00 	.word	0x40004c00
 8003d98:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	020b      	lsls	r3, r1, #8
 8003dae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003db2:	0202      	lsls	r2, r0, #8
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	6849      	ldr	r1, [r1, #4]
 8003db8:	0849      	lsrs	r1, r1, #1
 8003dba:	4608      	mov	r0, r1
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	1814      	adds	r4, r2, r0
 8003dc2:	eb43 0501 	adc.w	r5, r3, r1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc f9fe 	bl	80001d4 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de6:	d308      	bcc.n	8003dfa <UART_SetConfig+0x33a>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d204      	bcs.n	8003dfa <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e0b0      	b.n	8003f5c <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	76bb      	strb	r3, [r7, #26]
 8003dfe:	e0ad      	b.n	8003f5c <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e08:	d15c      	bne.n	8003ec4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003e0a:	7efb      	ldrb	r3, [r7, #27]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d828      	bhi.n	8003e62 <UART_SetConfig+0x3a2>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x358>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e63 	.word	0x08003e63
 8003e28:	08003e53 	.word	0x08003e53
 8003e2c:	08003e63 	.word	0x08003e63
 8003e30:	08003e63 	.word	0x08003e63
 8003e34:	08003e63 	.word	0x08003e63
 8003e38:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7fe f94c 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8003e40:	6178      	str	r0, [r7, #20]
        break;
 8003e42:	e013      	b.n	8003e6c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe f95e 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003e48:	6178      	str	r0, [r7, #20]
        break;
 8003e4a:	e00f      	b.n	8003e6c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <UART_SetConfig+0x4b4>)
 8003e4e:	617b      	str	r3, [r7, #20]
        break;
 8003e50:	e00c      	b.n	8003e6c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7fe f8a9 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8003e56:	6178      	str	r0, [r7, #20]
        break;
 8003e58:	e008      	b.n	8003e6c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	617b      	str	r3, [r7, #20]
        break;
 8003e60:	e004      	b.n	8003e6c <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	76bb      	strb	r3, [r7, #26]
        break;
 8003e6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d074      	beq.n	8003f5c <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005a      	lsls	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b0f      	cmp	r3, #15
 8003e8e:	d916      	bls.n	8003ebe <UART_SetConfig+0x3fe>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d212      	bcs.n	8003ebe <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	89fb      	ldrh	r3, [r7, #14]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	89fa      	ldrh	r2, [r7, #14]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e04e      	b.n	8003f5c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	76bb      	strb	r3, [r7, #26]
 8003ec2:	e04b      	b.n	8003f5c <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ec4:	7efb      	ldrb	r3, [r7, #27]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d827      	bhi.n	8003f1a <UART_SetConfig+0x45a>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x410>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003f0b 	.word	0x08003f0b
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f1b 	.word	0x08003f1b
 8003eec:	08003f1b 	.word	0x08003f1b
 8003ef0:	08003f13 	.word	0x08003f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe f8f0 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	6178      	str	r0, [r7, #20]
        break;
 8003efa:	e013      	b.n	8003f24 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003efc:	f7fe f902 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003f00:	6178      	str	r0, [r7, #20]
        break;
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <UART_SetConfig+0x4b4>)
 8003f06:	617b      	str	r3, [r7, #20]
        break;
 8003f08:	e00c      	b.n	8003f24 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe f84d 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8003f0e:	6178      	str	r0, [r7, #20]
        break;
 8003f10:	e008      	b.n	8003f24 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	617b      	str	r3, [r7, #20]
        break;
 8003f18:	e004      	b.n	8003f24 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	76bb      	strb	r3, [r7, #26]
        break;
 8003f22:	bf00      	nop
    }

    if (pclk != 0U)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d018      	beq.n	8003f5c <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	085a      	lsrs	r2, r3, #1
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	d908      	bls.n	8003f58 <UART_SetConfig+0x498>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d204      	bcs.n	8003f58 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	e001      	b.n	8003f5c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f68:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01a      	beq.n	800408e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004076:	d10a      	bne.n	800408e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040ca:	f7fc fee5 	bl	8000e98 <HAL_GetTick>
 80040ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d10e      	bne.n	80040fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f82a 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e020      	b.n	800413e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d10e      	bne.n	8004128 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800410a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f814 	bl	8004146 <UART_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e00a      	b.n	800413e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	e05d      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d059      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fc fe9a 	bl	8000e98 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <UART_WaitOnFlagUntilTimeout+0x30>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11b      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004184:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e042      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02b      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ca:	d123      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e00f      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	429a      	cmp	r2, r3
 8004230:	d092      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4d0d      	ldr	r5, [pc, #52]	; (8004274 <__libc_init_array+0x38>)
 8004240:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004242:	1b64      	subs	r4, r4, r5
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	2600      	movs	r6, #0
 8004248:	42a6      	cmp	r6, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	4d0b      	ldr	r5, [pc, #44]	; (800427c <__libc_init_array+0x40>)
 800424e:	4c0c      	ldr	r4, [pc, #48]	; (8004280 <__libc_init_array+0x44>)
 8004250:	f000 f820 	bl	8004294 <_init>
 8004254:	1b64      	subs	r4, r4, r5
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	2600      	movs	r6, #0
 800425a:	42a6      	cmp	r6, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	f855 3b04 	ldr.w	r3, [r5], #4
 8004264:	4798      	blx	r3
 8004266:	3601      	adds	r6, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	f855 3b04 	ldr.w	r3, [r5], #4
 800426e:	4798      	blx	r3
 8004270:	3601      	adds	r6, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	080042fc 	.word	0x080042fc
 8004278:	080042fc 	.word	0x080042fc
 800427c:	080042fc 	.word	0x080042fc
 8004280:	08004300 	.word	0x08004300

08004284 <memset>:
 8004284:	4402      	add	r2, r0
 8004286:	4603      	mov	r3, r0
 8004288:	4293      	cmp	r3, r2
 800428a:	d100      	bne.n	800428e <memset+0xa>
 800428c:	4770      	bx	lr
 800428e:	f803 1b01 	strb.w	r1, [r3], #1
 8004292:	e7f9      	b.n	8004288 <memset+0x4>

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
