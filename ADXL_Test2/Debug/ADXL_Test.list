
ADXL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004958  08004958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004960  08004960  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08004974  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004974  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d07a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bdf  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002ec98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002273c  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000092c4  00000000  00000000  000529ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1946  00000000  00000000  0005bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d5b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  0012d634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080048f8 	.word	0x080048f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080048f8 	.word	0x080048f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <reg_read_IT>:
static void reg_write(SPI_Comm, uint8_t, uint8_t);
static void fifo_init(SPI_Comm, int);
static void int1_init(SPI_Comm);

void reg_read_IT(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	f107 0408 	add.w	r4, r7, #8
 80004de:	e884 0003 	stmia.w	r4, {r0, r1}
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(spi.cs->port, spi.cs->pin, GPIO_PIN_RESET);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	889b      	ldrh	r3, [r3, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	f000 ffa2 	bl	800144c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000508:	68b8      	ldr	r0, [r7, #8]
 800050a:	f107 0117 	add.w	r1, r7, #23
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	2201      	movs	r2, #1
 8000514:	f002 fa69 	bl	80029ea <HAL_SPI_Transmit>
	HAL_SPI_Receive_IT(spi.handle, rx, size);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800051c:	b292      	uxth	r2, r2
 800051e:	6839      	ldr	r1, [r7, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f002 ff13 	bl	800334c <HAL_SPI_Receive_IT>
	return;
 8000526:	bf00      	nop
}
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd90      	pop	{r4, r7, pc}

0800052e <reg_read>:

void reg_read(SPI_Comm spi, uint8_t addr, uint8_t* rx, size_t size)
{
 800052e:	b590      	push	{r4, r7, lr}
 8000530:	b087      	sub	sp, #28
 8000532:	af00      	add	r7, sp, #0
 8000534:	f107 0408 	add.w	r4, r7, #8
 8000538:	e884 0003 	stmia.w	r4, {r0, r1}
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	4613      	mov	r3, r2
 8000540:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = (addr << 1) | 0x01;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b25b      	sxtb	r3, r3
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	b25b      	sxtb	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	889b      	ldrh	r3, [r3, #4]
 800055a:	4619      	mov	r1, r3
 800055c:	4610      	mov	r0, r2
 800055e:	f000 ff8d 	bl	800147c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f107 0117 	add.w	r1, r7, #23
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	f002 fa3c 	bl	80029ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi.handle, rx, size, HAL_MAX_DELAY);
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000576:	b29a      	uxth	r2, r3
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	f002 fba2 	bl	8002cc6 <HAL_SPI_Receive>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	889b      	ldrh	r3, [r3, #4]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 ff75 	bl	800147c <HAL_GPIO_TogglePin>

	return;
 8000592:	bf00      	nop
}
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}

0800059a <reg_write>:

static void reg_write(SPI_Comm spi, uint8_t addr, uint8_t payload)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	f107 0408 	add.w	r4, r7, #8
 80005a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80005a8:	4611      	mov	r1, r2
 80005aa:	461a      	mov	r2, r3
 80005ac:	460b      	mov	r3, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[] = {(addr << 1), payload};
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	753b      	strb	r3, [r7, #20]
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	757b      	strb	r3, [r7, #21]

	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4610      	mov	r0, r2
 80005cc:	f000 ff56 	bl	800147c <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(spi.handle, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f107 0114 	add.w	r1, r7, #20
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2202      	movs	r2, #2
 80005dc:	f002 fa05 	bl	80029ea <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(spi.cs->port, spi.cs->pin);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4610      	mov	r0, r2
 80005ec:	f000 ff46 	bl	800147c <HAL_GPIO_TogglePin>

	return;
 80005f0:	bf00      	nop
}
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <fifo_init>:


static void fifo_init(SPI_Comm spi, int samples) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
 8000606:	607a      	str	r2, [r7, #4]
	uint8_t samples_MSB = samples >> 8;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	121b      	asrs	r3, r3, #8
 800060c:	75fb      	strb	r3, [r7, #23]
	uint8_t samples_LSB = samples & 0xFF;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	75bb      	strb	r3, [r7, #22]
	uint8_t payload_FIFO_CTL = samples_MSB | 0x02;
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	757b      	strb	r3, [r7, #21]
	reg_write(spi, ADXL372_FIFO_CTL, payload_FIFO_CTL); //0b00000011 -> stream mode; sample MSB
 800061a:	7d7b      	ldrb	r3, [r7, #21]
 800061c:	223a      	movs	r2, #58	; 0x3a
 800061e:	f107 0108 	add.w	r1, r7, #8
 8000622:	c903      	ldmia	r1, {r0, r1}
 8000624:	f7ff ffb9 	bl	800059a <reg_write>
	reg_write(spi, ADXL372_FIFO_SAMPLES, samples_LSB); //0b1_00000000 -> 256 samples
 8000628:	7dbb      	ldrb	r3, [r7, #22]
 800062a:	2239      	movs	r2, #57	; 0x39
 800062c:	f107 0108 	add.w	r1, r7, #8
 8000630:	c903      	ldmia	r1, {r0, r1}
 8000632:	f7ff ffb2 	bl	800059a <reg_write>
}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <int1_init>:

static void int1_init(SPI_Comm spi) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	463b      	mov	r3, r7
 8000646:	e883 0003 	stmia.w	r3, {r0, r1}

	reg_write(spi, ADXL372_INT1_MAP, 0x04); //0b00000100 -> INT1 on FIFO Full Condition
 800064a:	2304      	movs	r3, #4
 800064c:	223b      	movs	r2, #59	; 0x3b
 800064e:	4639      	mov	r1, r7
 8000650:	c903      	ldmia	r1, {r0, r1}
 8000652:	f7ff ffa2 	bl	800059a <reg_write>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <stream_start>:

void stream_start(SPI_Comm spi, int samples) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	e883 0003 	stmia.w	r3, {r0, r1}
 800066c:	607a      	str	r2, [r7, #4]
	reg_write(spi, ADXL372_POWER_CTL, 0x00); // set standby mode before changing settings
 800066e:	2300      	movs	r3, #0
 8000670:	223f      	movs	r2, #63	; 0x3f
 8000672:	f107 0108 	add.w	r1, r7, #8
 8000676:	c903      	ldmia	r1, {r0, r1}
 8000678:	f7ff ff8f 	bl	800059a <reg_write>
	fifo_init(spi, samples);
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000686:	f7ff ffb7 	bl	80005f8 <fifo_init>
	int1_init(spi);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000692:	f7ff ffd4 	bl	800063e <int1_init>

	reg_write(spi, ADXL372_POWER_CTL, 0x03); //full bandwidth mode; HPF/LPF enabled
 8000696:	2303      	movs	r3, #3
 8000698:	223f      	movs	r2, #63	; 0x3f
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	c903      	ldmia	r1, {r0, r1}
 80006a0:	f7ff ff7b 	bl	800059a <reg_write>
	//reg_write(spi, ADXL372_POWER_CTL, 0x22); //instant on mode; high threshold
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <fifo_data>:

void fifo_data(SPI_Comm spi, uint8_t* data, size_t data_size) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	f107 0408 	add.w	r4, r7, #8
 80006b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
	uint8_t dummy = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	75fb      	strb	r3, [r7, #23]
	reg_read(spi, ADXL372_FIFO_DATA, data, data_size);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2242      	movs	r2, #66	; 0x42
 80006ca:	f107 0108 	add.w	r1, r7, #8
 80006ce:	c903      	ldmia	r1, {r0, r1}
 80006d0:	f7ff ff2d 	bl	800052e <reg_read>
	reg_read(spi, ADXL372_STATUS_1, &dummy, sizeof(dummy));
 80006d4:	f107 0217 	add.w	r2, r7, #23
 80006d8:	2301      	movs	r3, #1
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4613      	mov	r3, r2
 80006de:	2204      	movs	r2, #4
 80006e0:	f107 0108 	add.w	r1, r7, #8
 80006e4:	c903      	ldmia	r1, {r0, r1}
 80006e6:	f7ff ff22 	bl	800052e <reg_read>
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
	...

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fb3e 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f834 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f910 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000704:	f000 f8de 	bl	80008c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000708:	f000 f89e 	bl	8000848 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  // initialize SPI
  chip_select.port = GPIOB;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <main+0x5c>)
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <main+0x60>)
 8000710:	601a      	str	r2, [r3, #0]
  chip_select.pin = GPIO_PIN_6;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <main+0x5c>)
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	809a      	strh	r2, [r3, #4]
  accel_spi.handle = &hspi1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0x64>)
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <main+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  accel_spi.cs = &chip_select;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x64>)
 8000720:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <main+0x5c>)
 8000722:	605a      	str	r2, [r3, #4]

  fifo_buffer_size = sizeof(fifo_buffer);
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <main+0x6c>)
 8000726:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800072a:	601a      	str	r2, [r3, #0]

  stream_start(accel_spi, FIFO_SAMPLES);
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <main+0x64>)
 800072e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8000732:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000736:	f7ff ff92 	bl	800065e <stream_start>
  fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0x6c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0x64>)
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <main+0x70>)
 8000742:	c903      	ldmia	r1, {r0, r1}
 8000744:	f7ff ffb2 	bl	80006ac <fifo_data>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //reg_read(accel_spi, (uint8_t) ADXL372_FIFO_DATA, (uint8_t*) &fifo_buffer);

	  HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fb91 	bl	8000e70 <HAL_Delay>
 800074e:	e7fb      	b.n	8000748 <main+0x54>
 8000750:	20000224 	.word	0x20000224
 8000754:	48000400 	.word	0x48000400
 8000758:	2000022c 	.word	0x2000022c
 800075c:	20000234 	.word	0x20000234
 8000760:	20000318 	.word	0x20000318
 8000764:	2000002c 	.word	0x2000002c

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0b0      	sub	sp, #192	; 0xc0
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000772:	2244      	movs	r2, #68	; 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 f8b6 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2268      	movs	r2, #104	; 0x68
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 f8a8 	bl	80048e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007bc:	230a      	movs	r3, #10
 80007be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fee5 	bl	80015a8 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007e4:	f000 f978 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2303      	movs	r3, #3
 80007ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000800:	2104      	movs	r1, #4
 8000802:	4618      	mov	r0, r3
 8000804:	f001 faf0 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800080e:	f000 f963 	bl	8000ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000812:	2302      	movs	r3, #2
 8000814:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fce7 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000828:	f000 f956 	bl	8000ad8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000830:	f000 fe64 	bl	80014fc <HAL_PWREx_ControlVoltageScaling>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800083a:	f000 f94d 	bl	8000ad8 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	37c0      	adds	r7, #192	; 0xc0
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_SPI1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_SPI1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_SPI1_Init+0x74>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x74>)
 8000862:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000866:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x74>)
 8000876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x74>)
 800087e:	2218      	movs	r2, #24
 8000880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x74>)
 8000896:	2207      	movs	r2, #7
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x74>)
 80008a2:	2208      	movs	r2, #8
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_SPI1_Init+0x74>)
 80008a8:	f001 fffc 	bl	80028a4 <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f911 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000234 	.word	0x20000234
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_USART2_UART_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x58>)
 8000908:	f003 fb28 	bl	8003f5c <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f8e1 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000298 	.word	0x20000298
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <MX_GPIO_Init+0xe8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a2d      	ldr	r2, [pc, #180]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xe8>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xe8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0xec>)
 80009a0:	f000 fd54 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xf0>)
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <MX_GPIO_Init+0xf4>)
 80009ba:	f000 fbcd 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_GPIO_Init+0xf8>)
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_GPIO_Init+0xf4>)
 80009d2:	f000 fbc1 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_GPIO_Init+0xec>)
 80009ee:	f000 fbb3 	bl	8001158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2017      	movs	r0, #23
 80009f8:	f000 fb37 	bl	800106a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009fc:	2017      	movs	r0, #23
 80009fe:	f000 fb50 	bl	80010a2 <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400
 8000a14:	10210000 	.word	0x10210000
 8000a18:	48000800 	.word	0x48000800
 8000a1c:	10110000 	.word	0x10110000

08000a20 <HAL_SPI_RxCpltCallback>:
	return;
}

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	if (fifo_read_flag) {
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_SPI_RxCpltCallback+0x5c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d017      	beq.n	8000a62 <HAL_SPI_RxCpltCallback+0x42>
		fifo_read_flag = 0;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_SPI_RxCpltCallback+0x5c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		uint8_t dummy = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
		//uint8_t tx = (ADXL372_STATUS_1 << 1) | 0x01;
		//HAL_SPI_Transmit(hspi, (uint8_t *)&tx, sizeof(tx), HAL_MAX_DELAY);
		//HAL_SPI_Receive(hspi, (uint8_t *)&dummy, sizeof(dummy), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, fifo_buffer, fifo_buffer_size, HAL_MAX_DELAY);
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_SPI_RxCpltCallback+0x60>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	490f      	ldr	r1, [pc, #60]	; (8000a84 <HAL_SPI_RxCpltCallback+0x64>)
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <HAL_SPI_RxCpltCallback+0x68>)
 8000a4a:	f003 fad5 	bl	8003ff8 <HAL_UART_Transmit>
		reg_read_IT(accel_spi, ADXL372_STATUS_1, &dummy, sizeof(dummy));
 8000a4e:	f107 020f 	add.w	r2, r7, #15
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <HAL_SPI_RxCpltCallback+0x6c>)
 8000a54:	2301      	movs	r3, #1
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	c903      	ldmia	r1, {r0, r1}
 8000a5e:	f7ff fd39 	bl	80004d4 <reg_read_IT>
	}
	// Set CS pin to high and raise flag
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	480a      	ldr	r0, [pc, #40]	; (8000a90 <HAL_SPI_RxCpltCallback+0x70>)
 8000a68:	f000 fcf0 	bl	800144c <HAL_GPIO_WritePin>
	spi_recv_flag = 1;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_SPI_RxCpltCallback+0x74>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000029 	.word	0x20000029
 8000a80:	20000318 	.word	0x20000318
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	20000298 	.word	0x20000298
 8000a8c:	2000022c 	.word	0x2000022c
 8000a90:	48000400 	.word	0x48000400
 8000a94:	20000028 	.word	0x20000028

08000a98 <HAL_GPIO_EXTI_Callback>:



// ISR for FIFO Full
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	/*
	uint8_t dummy = 0;
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_2, &dummy, sizeof(dummy));
	reg_read(accel_spi, ADXL372_FIFO_ENTRIES_1, &dummy, sizeof(dummy));
	*/
	if(GPIO_Pin == GPIO_PIN_7) {
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b80      	cmp	r3, #128	; 0x80
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_GPIO_EXTI_Callback+0x28>
		fifo_read_flag = 1;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
		//fifo_data(accel_spi, fifo_buffer, fifo_buffer_size);
		reg_read_IT(accel_spi, ADXL372_FIFO_DATA, fifo_buffer, fifo_buffer_size);
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_GPIO_EXTI_Callback+0x34>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ab8:	2242      	movs	r2, #66	; 0x42
 8000aba:	c903      	ldmia	r1, {r0, r1}
 8000abc:	f7ff fd0a 	bl	80004d4 <reg_read_IT>
	}

}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000029 	.word	0x20000029
 8000acc:	20000318 	.word	0x20000318
 8000ad0:	2000022c 	.word	0x2000022c
 8000ad4:	2000002c 	.word	0x2000002c

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x6>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d130      	bne.n	8000bac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_SPI_MspInit+0x90>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b7a:	23e0      	movs	r3, #224	; 0xe0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 fade 	bl	8001158 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2023      	movs	r0, #35	; 0x23
 8000ba2:	f000 fa62 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ba6:	2023      	movs	r0, #35	; 0x23
 8000ba8:	f000 fa7b 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0x7c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d128      	bne.n	8000c30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0x80>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 fa94 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f8d0 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c98:	2080      	movs	r0, #128	; 0x80
 8000c9a:	f000 fc09 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <SPI1_IRQHandler+0x10>)
 8000caa:	f002 fcaf 	bl	800360c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000234 	.word	0x20000234

08000cb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <SystemInit+0x64>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <SystemInit+0x64>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <SystemInit+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <SystemInit+0x68>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <SystemInit+0x68>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SystemInit+0x68>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <SystemInit+0x68>)
 8000ce4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ce8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <SystemInit+0x68>)
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <SystemInit+0x68>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <SystemInit+0x68>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <SystemInit+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x64>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	40021000 	.word	0x40021000

08000d24 <Reset_Handler>:
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopForever+0x2>
 8000d28:	f7ff ffc6 	bl	8000cb8 <SystemInit>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e003      	b.n	8000d38 <LoopCopyDataInit>

08000d30 <CopyDataInit>:
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <LoopForever+0x6>)
 8000d32:	585b      	ldr	r3, [r3, r1]
 8000d34:	5043      	str	r3, [r0, r1]
 8000d36:	3104      	adds	r1, #4

08000d38 <LoopCopyDataInit>:
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <LoopForever+0xa>)
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <LoopForever+0xe>)
 8000d3c:	1842      	adds	r2, r0, r1
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3f6      	bcc.n	8000d30 <CopyDataInit>
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopForever+0x12>)
 8000d44:	e002      	b.n	8000d4c <LoopFillZerobss>

08000d46 <FillZerobss>:
 8000d46:	2300      	movs	r3, #0
 8000d48:	f842 3b04 	str.w	r3, [r2], #4

08000d4c <LoopFillZerobss>:
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <LoopForever+0x16>)
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3f9      	bcc.n	8000d46 <FillZerobss>
 8000d52:	f003 fda5 	bl	80048a0 <__libc_init_array>
 8000d56:	f7ff fccd 	bl	80006f4 <main>

08000d5a <LoopForever>:
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
 8000d5c:	20028000 	.word	0x20028000
 8000d60:	08004968 	.word	0x08004968
 8000d64:	20000000 	.word	0x20000000
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	20000320 	.word	0x20000320

08000d74 <ADC1_IRQHandler>:
 8000d74:	e7fe      	b.n	8000d74 <ADC1_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_Init+0x3c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x3c>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f960 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f80f 	bl	8000db8 <HAL_InitTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	e001      	b.n	8000daa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da6:	f7ff fe9b 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d023      	beq.n	8000e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_InitTick+0x70>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_InitTick+0x6c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f96b 	bl	80010be <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10f      	bne.n	8000e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d809      	bhi.n	8000e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f935 	bl	800106a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0x74>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e001      	b.n	8000e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000031c 	.word	0x2000031c

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	2000031c 	.word	0x2000031c

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_Delay+0x40>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d005      	beq.n	80010fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e029      	b.n	800114e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 020e 	bic.w	r2, r2, #14
 8001108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f003 021c 	and.w	r2, r3, #28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    }
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e154      	b.n	8001412 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8146 	beq.w	800140c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00b      	beq.n	80011a0 <HAL_GPIO_Init+0x48>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	2b11      	cmp	r3, #17
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0xea>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80a0 	beq.w	800140c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6613      	str	r3, [r2, #96]	; 0x60
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e4:	4a53      	ldr	r2, [pc, #332]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800130e:	d019      	beq.n	8001344 <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2e0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d013      	beq.n	8001340 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2e4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00d      	beq.n	800133c <HAL_GPIO_Init+0x1e4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a47      	ldr	r2, [pc, #284]	; (8001440 <HAL_GPIO_Init+0x2e8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x1e0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a46      	ldr	r2, [pc, #280]	; (8001444 <HAL_GPIO_Init+0x2ec>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_GPIO_Init+0x1dc>
 8001330:	2304      	movs	r3, #4
 8001332:	e008      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001334:	2307      	movs	r3, #7
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001338:	2303      	movs	r3, #3
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001388:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f aea3 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43d9      	mvns	r1, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	400b      	ands	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fae2 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800150a:	d130      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001518:	d038      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2232      	movs	r2, #50	; 0x32
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	e002      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001554:	d102      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f2      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d110      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e00f      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d007      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 bc11 	b.w	8001dde <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4b9e      	ldr	r3, [pc, #632]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80e4 	beq.w	80017a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f040 808b 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 8087 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x64>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e3e8      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_RCC_OscConfig+0x7e>
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001624:	e005      	b.n	8001632 <HAL_RCC_OscConfig+0x8a>
 8001626:	4b86      	ldr	r3, [pc, #536]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	4293      	cmp	r3, r2
 8001634:	d223      	bcs.n	800167e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd78 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3c9      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7c      	ldr	r2, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4977      	ldr	r1, [pc, #476]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001668:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	4972      	ldr	r1, [pc, #456]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e025      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	496a      	ldr	r1, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	4b68      	ldr	r3, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	4965      	ldr	r1, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd38 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e389      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ca:	f000 fc6f 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x29c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa21 f303 	lsr.w	r3, r1, r3
 80016e6:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_RCC_OscConfig+0x2a0>)
 80016e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x2a4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fb62 	bl	8000db8 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d052      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	e36d      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d032      	beq.n	8001770 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a4c      	ldr	r2, [pc, #304]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001716:	f7ff fb9f 	bl	8000e58 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171e:	f7ff fb9b 	bl	8000e58 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e356      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	493a      	ldr	r1, [pc, #232]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	4935      	ldr	r1, [pc, #212]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a32      	ldr	r2, [pc, #200]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb6c 	bl	8000e58 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff fb68 	bl	8000e58 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e323      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1dc>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d073      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x21c>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d10e      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d063      	beq.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15f      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e300      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x24c>
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0x288>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x270>
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x288>
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_RCC_OscConfig+0x298>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fb0e 	bl	8000e58 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183e:	e010      	b.n	8001862 <HAL_RCC_OscConfig+0x2ba>
 8001840:	40021000 	.word	0x40021000
 8001844:	08004910 	.word	0x08004910
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb02 	bl	8000e58 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2bd      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4baf      	ldr	r3, [pc, #700]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a8>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff faf2 	bl	8000e58 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff faee 	bl	8000e58 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a9      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4ba5      	ldr	r3, [pc, #660]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x310>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e286      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b93      	ldr	r3, [pc, #588]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4990      	ldr	r1, [pc, #576]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	e040      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8b      	ldr	r2, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff faad 	bl	8000e58 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff faa9 	bl	8000e58 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e264      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	497c      	ldr	r1, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a79      	ldr	r2, [pc, #484]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fa89 	bl	8000e58 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fa85 	bl	8000e58 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e240      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fa64 	bl	8000e58 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fa60 	bl	8000e58 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e21b      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa47 	bl	8000e58 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fa43 	bl	8000e58 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1fe      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a6 	beq.w	8001b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fa0a 	bl	8000e58 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff fa06 	bl	8000e58 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1c1      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	4a2a      	ldr	r2, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7e:	e024      	b.n	8001aca <HAL_RCC_OscConfig+0x522>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d110      	bne.n	8001aaa <HAL_RCC_OscConfig+0x502>
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	e00f      	b.n	8001aca <HAL_RCC_OscConfig+0x522>
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f9c1 	bl	8000e58 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f9bd 	bl	8000e58 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e176      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ed      	beq.n	8001ada <HAL_RCC_OscConfig+0x532>
 8001afe:	e01a      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f9aa 	bl	8000e58 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b06:	e00f      	b.n	8001b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f9a6 	bl	8000e58 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d906      	bls.n	8001b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e15f      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4baa      	ldr	r3, [pc, #680]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e8      	bne.n	8001b08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4ba5      	ldr	r3, [pc, #660]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4aa4      	ldr	r2, [pc, #656]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b62:	4a9c      	ldr	r2, [pc, #624]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f974 	bl	8000e58 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7ff f970 	bl	8000e58 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e12b      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	4b93      	ldr	r3, [pc, #588]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5cc>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b96:	4b8f      	ldr	r3, [pc, #572]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9c:	4a8d      	ldr	r2, [pc, #564]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f957 	bl	8000e58 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7ff f953 	bl	8000e58 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e10e      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8102 	beq.w	8001ddc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	f040 80c5 	bne.w	8001d6c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be2:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0203 	and.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d12c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	3b01      	subs	r3, #1
 8001c02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d123      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d067      	beq.n	8001d20 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d062      	beq.n	8001d1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0bb      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c66:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c72:	f7ff f8f1 	bl	8000e58 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f8ed 	bl	8000e58 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0a8      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0x830>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb2:	0212      	lsls	r2, r2, #8
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cba:	0852      	lsrs	r2, r2, #1
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0552      	lsls	r2, r2, #21
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc6:	0852      	lsrs	r2, r2, #1
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0652      	lsls	r2, r2, #25
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd2:	06d2      	lsls	r2, r2, #27
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a39      	ldr	r2, [pc, #228]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf4:	f7ff f8b0 	bl	8000e58 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f8ac 	bl	8000e58 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e067      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1a:	e05f      	b.n	8001ddc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e05e      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d157      	bne.n	8001ddc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d44:	f7ff f888 	bl	8000e58 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f884 	bl	8000e58 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e03f      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x7a4>
 8001d6a:	e037      	b.n	8001ddc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d02d      	beq.n	8001dce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f857 	bl	8000e58 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f853 	bl	8000e58 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e00e      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x806>
 8001dcc:	e006      	b.n	8001ddc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e005      	b.n	8001dde <HAL_RCC_OscConfig+0x836>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0c8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d910      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	4961      	ldr	r1, [pc, #388]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b0      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d04c      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e09e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d115      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e092      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e70:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e086      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e07e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 0203 	bic.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	493f      	ldr	r1, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ffd9 	bl	8000e58 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe ffd5 	bl	8000e58 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e066      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 020c 	and.w	r2, r3, #12
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d1eb      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	492c      	ldr	r1, [pc, #176]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4924      	ldr	r1, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e036      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4910      	ldr	r1, [pc, #64]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5e:	f000 f825 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f62:	4601      	mov	r1, r0
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	fa21 f303 	lsr.w	r3, r1, r3
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ff18 	bl	8000db8 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08004910 	.word	0x08004910
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d11e      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fe0:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002008:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d102      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e004      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d101      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d133      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0xa4>
 800204a:	2b03      	cmp	r3, #3
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0xaa>
 800204e:	e005      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002052:	617b      	str	r3, [r7, #20]
      break;
 8002054:	e005      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002058:	617b      	str	r3, [r7, #20]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	617b      	str	r3, [r7, #20]
      break;
 8002060:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	3301      	adds	r3, #1
 800206e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	fb02 f203 	mul.w	r2, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0e5b      	lsrs	r3, r3, #25
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020a2:	69bb      	ldr	r3, [r7, #24]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08004928 	.word	0x08004928
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	007a1200 	.word	0x007a1200

080020c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020dc:	f7ff fff0 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020e0:	4601      	mov	r1, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	08004920 	.word	0x08004920

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002108:	f7ff ffda 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_RCC_GetPCLK2Freq+0x28>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	08004920 	.word	0x08004920

08002130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002148:	f7ff f9ca 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 800214c:	6178      	str	r0, [r7, #20]
 800214e:	e014      	b.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002168:	f7ff f9ba 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 800216c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002180:	d10b      	bne.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d919      	bls.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2ba0      	cmp	r3, #160	; 0xa0
 800218c:	d902      	bls.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800218e:	2302      	movs	r3, #2
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e013      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e010      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d902      	bls.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a0:	2303      	movs	r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e00a      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d102      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ac:	2302      	movs	r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e004      	b.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b70      	cmp	r3, #112	; 0x70
 80021b6:	d101      	bne.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b8:	2301      	movs	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4909      	ldr	r1, [pc, #36]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021f8:	2300      	movs	r3, #0
 80021fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02f      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002214:	d005      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002216:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800221a:	d015      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002220:	e00f      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a5c      	ldr	r2, [pc, #368]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222e:	e00c      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fa44 	bl	80026c4 <RCCEx_PLLSAI1_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002240:	e003      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	74fb      	strb	r3, [r7, #19]
      break;
 8002246:	e000      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	494e      	ldr	r1, [pc, #312]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002266:	e001      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 809e 	beq.w	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a3f      	ldr	r2, [pc, #252]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fdcc 	bl	8000e58 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c2:	e009      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c4:	f7fe fdc8 	bl	8000e58 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d902      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	74fb      	strb	r3, [r7, #19]
        break;
 80022d6:	e005      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d15a      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01e      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	429a      	cmp	r2, r3
 8002304:	d019      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fd88 	bl	8000e58 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	e00b      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe fd84 	bl	8000e58 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d902      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	74fb      	strb	r3, [r7, #19]
            break;
 8002362:	e006      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ec      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002386:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800238e:	e009      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
 8002394:	e006      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a4:	7c7b      	ldrb	r3, [r7, #17]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b9e      	ldr	r3, [pc, #632]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a9d      	ldr	r2, [pc, #628]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c2:	4b98      	ldr	r3, [pc, #608]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f023 0203 	bic.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4994      	ldr	r1, [pc, #592]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 020c 	bic.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	498c      	ldr	r1, [pc, #560]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002406:	4b87      	ldr	r3, [pc, #540]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	4983      	ldr	r1, [pc, #524]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002428:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	497b      	ldr	r1, [pc, #492]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4972      	ldr	r1, [pc, #456]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246c:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	496a      	ldr	r1, [pc, #424]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	4961      	ldr	r1, [pc, #388]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b0:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	4959      	ldr	r1, [pc, #356]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d2:	4b54      	ldr	r3, [pc, #336]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	4950      	ldr	r1, [pc, #320]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f4:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	4948      	ldr	r1, [pc, #288]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002516:	4b43      	ldr	r3, [pc, #268]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800251c:	f023 0203 	bic.w	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	493f      	ldr	r1, [pc, #252]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d028      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002556:	d106      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002562:	60d3      	str	r3, [r2, #12]
 8002564:	e011      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800256e:	d10c      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f8a4 	bl	80026c4 <RCCEx_PLLSAI1_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	491f      	ldr	r1, [pc, #124]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b4:	d106      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c0:	60d3      	str	r3, [r2, #12]
 80025c2:	e011      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f875 	bl	80026c4 <RCCEx_PLLSAI1_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002612:	d109      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a02      	ldr	r2, [pc, #8]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
 8002620:	e014      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002630:	d10c      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f843 	bl	80026c4 <RCCEx_PLLSAI1_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002676:	d10c      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f820 	bl	80026c4 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d10d      	bne.n	800270a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
       ||
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026f6:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
       ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d044      	beq.n	8002794 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e041      	b.n	8002794 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d00c      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x6e>
 8002718:	2b03      	cmp	r3, #3
 800271a:	d013      	beq.n	8002744 <RCCEx_PLLSAI1_Config+0x80>
 800271c:	2b01      	cmp	r3, #1
 800271e:	d120      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002720:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11d      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002730:	e01a      	b.n	8002768 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002732:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002742:	e013      	b.n	800276c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002744:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002760:	e006      	b.n	8002770 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      break;
 8002766:	e004      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002768:	bf00      	nop
 800276a:	e002      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002770:	bf00      	nop
    }

    if(status == HAL_OK)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10d      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002778:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	3b01      	subs	r3, #1
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	430b      	orrs	r3, r1
 800278e:	4944      	ldr	r1, [pc, #272]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d17c      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a6:	f7fe fb57 	bl	8000e58 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ac:	e009      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ae:	f7fe fb53 	bl	8000e58 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	73fb      	strb	r3, [r7, #15]
        break;
 80027c0:	e005      	b.n	80027ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d15f      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d110      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6892      	ldr	r2, [r2, #8]
 80027ea:	0211      	lsls	r1, r2, #8
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68d2      	ldr	r2, [r2, #12]
 80027f0:	06d2      	lsls	r2, r2, #27
 80027f2:	430a      	orrs	r2, r1
 80027f4:	492a      	ldr	r1, [pc, #168]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
 80027fa:	e027      	b.n	800284c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d112      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0552      	lsls	r2, r2, #21
 800281e:	430a      	orrs	r2, r1
 8002820:	491f      	ldr	r1, [pc, #124]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	610b      	str	r3, [r1, #16]
 8002826:	e011      	b.n	800284c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	0211      	lsls	r1, r2, #8
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6952      	ldr	r2, [r2, #20]
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0652      	lsls	r2, r2, #25
 8002844:	430a      	orrs	r2, r1
 8002846:	4916      	ldr	r1, [pc, #88]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fafe 	bl	8000e58 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fe fafa 	bl	8000e58 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
          break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4904      	ldr	r1, [pc, #16]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e095      	b.n	80029e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d009      	beq.n	80028dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e005      	b.n	80028dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f916 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800291c:	d902      	bls.n	8002924 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e002      	b.n	800292a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002928:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002932:	d007      	beq.n	8002944 <HAL_SPI_Init+0xa0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	ea42 0103 	orr.w	r1, r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 0204 	and.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029c0:	ea42 0103 	orr.w	r1, r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b088      	sub	sp, #32
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_Transmit+0x22>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e158      	b.n	8002cbe <HAL_SPI_Transmit+0x2d4>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a14:	f7fe fa20 	bl	8000e58 <HAL_GetTick>
 8002a18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a2e:	e13d      	b.n	8002cac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_Transmit+0x52>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a40:	e134      	b.n	8002cac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8c:	d10f      	bne.n	8002aae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d007      	beq.n	8002acc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad4:	d94b      	bls.n	8002b6e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_SPI_Transmit+0xfa>
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d13e      	bne.n	8002b62 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b08:	e02b      	b.n	8002b62 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d112      	bne.n	8002b3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b3c:	e011      	b.n	8002b62 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3e:	f7fe f98b 	bl	8000e58 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d803      	bhi.n	8002b56 <HAL_SPI_Transmit+0x16c>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d102      	bne.n	8002b5c <HAL_SPI_Transmit+0x172>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b60:	e0a4      	b.n	8002cac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ce      	bne.n	8002b0a <HAL_SPI_Transmit+0x120>
 8002b6c:	e07c      	b.n	8002c68 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Transmit+0x192>
 8002b76:	8afb      	ldrh	r3, [r7, #22]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d170      	bne.n	8002c5e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d912      	bls.n	8002bac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b02      	subs	r3, #2
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002baa:	e058      	b.n	8002c5e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002bd2:	e044      	b.n	8002c5e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d12b      	bne.n	8002c3a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d912      	bls.n	8002c12 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	1c9a      	adds	r2, r3, #2
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b02      	subs	r3, #2
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c10:	e025      	b.n	8002c5e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c38:	e011      	b.n	8002c5e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3a:	f7fe f90d 	bl	8000e58 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d803      	bhi.n	8002c52 <HAL_SPI_Transmit+0x268>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d102      	bne.n	8002c58 <HAL_SPI_Transmit+0x26e>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c5c:	e026      	b.n	8002cac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1b5      	bne.n	8002bd4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f001 f8bd 	bl	8003dec <SPI_EndRxTxTransaction>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e000      	b.n	8002cac <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b088      	sub	sp, #32
 8002cca:	af02      	add	r7, sp, #8
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce2:	d112      	bne.n	8002d0a <HAL_SPI_Receive+0x44>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10e      	bne.n	8002d0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cf4:	88fa      	ldrh	r2, [r7, #6]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f910 	bl	8002f26 <HAL_SPI_TransmitReceive>
 8002d06:	4603      	mov	r3, r0
 8002d08:	e109      	b.n	8002f1e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_SPI_Receive+0x52>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e102      	b.n	8002f1e <HAL_SPI_Receive+0x258>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d20:	f7fe f89a 	bl	8000e58 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d36:	e0e9      	b.n	8002f0c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Receive+0x7e>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d48:	e0e0      	b.n	8002f0c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d94:	d908      	bls.n	8002da8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e007      	b.n	8002db8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e08:	d867      	bhi.n	8002eda <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e0a:	e030      	b.n	8002e6e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d117      	bne.n	8002e4a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f103 020c 	add.w	r2, r3, #12
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e48:	e011      	b.n	8002e6e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4a:	f7fe f805 	bl	8000e58 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Receive+0x19c>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Receive+0x1a2>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e6c:	e04e      	b.n	8002f0c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1c8      	bne.n	8002e0c <HAL_SPI_Receive+0x146>
 8002e7a:	e034      	b.n	8002ee6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d115      	bne.n	8002eb6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	b292      	uxth	r2, r2
 8002e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002eb4:	e011      	b.n	8002eda <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb6:	f7fd ffcf 	bl	8000e58 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d803      	bhi.n	8002ece <HAL_SPI_Receive+0x208>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_Receive+0x20e>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ed8:	e018      	b.n	8002f0c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ca      	bne.n	8002e7c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 ff26 	bl	8003d3c <SPI_EndRxTransaction>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
 8002f08:	e000      	b.n	8002f0c <HAL_SPI_Receive+0x246>
  }

error :
 8002f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08a      	sub	sp, #40	; 0x28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f34:	2301      	movs	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x26>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e1fb      	b.n	8003344 <HAL_SPI_TransmitReceive+0x41e>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f54:	f7fd ff80 	bl	8000e58 <HAL_GetTick>
 8002f58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f70:	7efb      	ldrb	r3, [r7, #27]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d00e      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x6e>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7c:	d106      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x66>
 8002f86:	7efb      	ldrb	r3, [r7, #27]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d003      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f92:	e1cd      	b.n	8003330 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x80>
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fac:	e1c0      	b.n	8003330 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d003      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003004:	d802      	bhi.n	800300c <HAL_SPI_TransmitReceive+0xe6>
 8003006:	8a3b      	ldrh	r3, [r7, #16]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d908      	bls.n	800301e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e007      	b.n	800302e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800302c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d007      	beq.n	800304c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003054:	d97c      	bls.n	8003150 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x13e>
 800305e:	8a7b      	ldrh	r3, [r7, #18]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d169      	bne.n	8003138 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	1c9a      	adds	r2, r3, #2
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003088:	e056      	b.n	8003138 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d11b      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x1aa>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x1aa>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d113      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	881a      	ldrh	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d11c      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x1f2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	b292      	uxth	r2, r2
 80030f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003114:	2301      	movs	r3, #1
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003118:	f7fd fe9e 	bl	8000e58 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003124:	429a      	cmp	r2, r3
 8003126:	d807      	bhi.n	8003138 <HAL_SPI_TransmitReceive+0x212>
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d003      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003136:	e0fb      	b.n	8003330 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1a3      	bne.n	800308a <HAL_SPI_TransmitReceive+0x164>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d19d      	bne.n	800308a <HAL_SPI_TransmitReceive+0x164>
 800314e:	e0df      	b.n	8003310 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x23a>
 8003158:	8a7b      	ldrh	r3, [r7, #18]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80cb 	bne.w	80032f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d912      	bls.n	8003190 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b02      	subs	r3, #2
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800318e:	e0b2      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b6:	e09e      	b.n	80032f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d134      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x30a>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d02f      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x30a>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d12c      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d912      	bls.n	8003206 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b02      	subs	r3, #2
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003204:	e012      	b.n	800322c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d148      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x3aa>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d042      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d923      	bls.n	800329e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	b292      	uxth	r2, r2
 8003262:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b02      	subs	r3, #2
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d81f      	bhi.n	80032cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	e016      	b.n	80032cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f103 020c 	add.w	r2, r3, #12
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032cc:	2301      	movs	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d0:	f7fd fdc2 	bl	8000e58 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032dc:	429a      	cmp	r2, r3
 80032de:	d803      	bhi.n	80032e8 <HAL_SPI_TransmitReceive+0x3c2>
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d102      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x3c8>
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032f4:	e01c      	b.n	8003330 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f af5b 	bne.w	80031b8 <HAL_SPI_TransmitReceive+0x292>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f af54 	bne.w	80031b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fd69 	bl	8003dec <SPI_EndRxTxTransaction>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
 800332c:	e000      	b.n	8003330 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800332e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003344:	4618      	mov	r0, r3
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d110      	bne.n	8003388 <HAL_SPI_Receive_IT+0x3c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336e:	d10b      	bne.n	8003388 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2204      	movs	r2, #4
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f894 	bl	80034ac <HAL_SPI_TransmitReceive_IT>
 8003384:	4603      	mov	r3, r0
 8003386:	e089      	b.n	800349c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_SPI_Receive_IT+0x4a>
 8003392:	2302      	movs	r3, #2
 8003394:	e082      	b.n	800349c <HAL_SPI_Receive_IT+0x150>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ae:	e070      	b.n	8003492 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Receive_IT+0x70>
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033c0:	e067      	b.n	8003492 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2204      	movs	r2, #4
 80033c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003406:	d90b      	bls.n	8003420 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003416:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <HAL_SPI_Receive_IT+0x158>)
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
 800341e:	e00a      	b.n	8003436 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800342e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_SPI_Receive_IT+0x15c>)
 8003434:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343e:	d10f      	bne.n	8003460 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800345e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d008      	beq.n	8003490 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e000      	b.n	8003492 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003490:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	08003ac5 	.word	0x08003ac5
 80034a8:	08003a75 	.word	0x08003a75

080034ac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_SPI_TransmitReceive_IT+0x20>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e091      	b.n	80035f0 <HAL_SPI_TransmitReceive_IT+0x144>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034e2:	7dbb      	ldrb	r3, [r7, #22]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d00d      	beq.n	8003504 <HAL_SPI_TransmitReceive_IT+0x58>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ee:	d106      	bne.n	80034fe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_SPI_TransmitReceive_IT+0x52>
 80034f8:	7dbb      	ldrb	r3, [r7, #22]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003502:	e070      	b.n	80035e6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_SPI_TransmitReceive_IT+0x6a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800351a:	e064      	b.n	80035e6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b04      	cmp	r3, #4
 8003526:	d003      	beq.n	8003530 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2205      	movs	r2, #5
 800352c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003566:	d906      	bls.n	8003576 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a24      	ldr	r2, [pc, #144]	; (80035fc <HAL_SPI_TransmitReceive_IT+0x150>)
 800356c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003572:	651a      	str	r2, [r3, #80]	; 0x50
 8003574:	e005      	b.n	8003582 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a22      	ldr	r2, [pc, #136]	; (8003604 <HAL_SPI_TransmitReceive_IT+0x158>)
 800357a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800358a:	d802      	bhi.n	8003592 <HAL_SPI_TransmitReceive_IT+0xe6>
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d908      	bls.n	80035a4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e007      	b.n	80035b4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80035c2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d008      	beq.n	80035e4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e000      	b.n	80035e6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80035e4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	080039af 	.word	0x080039af
 8003600:	08003a15 	.word	0x08003a15
 8003604:	0800385f 	.word	0x0800385f
 8003608:	0800391d 	.word	0x0800391d

0800360c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10f      	bne.n	8003650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
    return;
 800364e:	e0d8      	b.n	8003802 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_SPI_IRQHandler+0x66>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	09db      	lsrs	r3, r3, #7
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
    return;
 8003670:	e0c7      	b.n	8003802 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_SPI_IRQHandler+0x8c>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80b5 	beq.w	8003802 <HAL_SPI_IRQHandler+0x1f6>
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ae 	beq.w	8003802 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d023      	beq.n	80036fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d011      	beq.n	80036e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	e00b      	b.n	80036fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]
        return;
 80036f8:	e083      	b.n	8003802 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d014      	beq.n	8003730 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	f043 0208 	orr.w	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	2b00      	cmp	r3, #0
 800375c:	d050      	beq.n	8003800 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800376c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <HAL_SPI_IRQHandler+0x17e>
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d034      	beq.n	80037f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0203 	bic.w	r2, r2, #3
 8003798:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d011      	beq.n	80037c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_SPI_IRQHandler+0x1fc>)
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fc91 	bl	80010d6 <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_SPI_IRQHandler+0x1fc>)
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fc7b 	bl	80010d6 <HAL_DMA_Abort_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80037f2:	e003      	b.n	80037fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f813 	bl	8003820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037fa:	e000      	b.n	80037fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80037fc:	bf00      	nop
    return;
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
  }
}
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	08003835 	.word	0x08003835

0800380c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ffe5 	bl	8003820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d923      	bls.n	80038ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	b292      	uxth	r2, r2
 800387e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b02      	subs	r3, #2
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d11f      	bne.n	80038e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	e016      	b.n	80038e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f103 020c 	add.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003902:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fab2 	bl	8003e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d912      	bls.n	8003954 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b02      	subs	r3, #2
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003952:	e012      	b.n	800397a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d110      	bne.n	80039a6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003992:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fa69 	bl	8003e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	b292      	uxth	r2, r2
 80039c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa36 	bl	8003e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a58:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa06 	bl	8003e78 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f103 020c 	add.w	r2, r3, #12
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa20 	bl	8003efc <SPI_CloseRx_ISR>
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	1c9a      	adds	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9fa 	bl	8003efc <SPI_CloseRx_ISR>
  }
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b20:	f7fd f99a 	bl	8000e58 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b30:	f7fd f992 	bl	8000e58 <HAL_GetTick>
 8003b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	015b      	lsls	r3, r3, #5
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	e054      	b.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d050      	beq.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b50:	f7fd f982 	bl	8000e58 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d13d      	bne.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7e:	d111      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	d004      	beq.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b92:	d107      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bac:	d10f      	bne.n	8003bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e017      	b.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d19b      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000

08003c20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c2e:	f7fd f913 	bl	8000e58 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c3e:	f7fd f90b 	bl	8000e58 <HAL_GetTick>
 8003c42:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c44:	4b3c      	ldr	r3, [pc, #240]	; (8003d38 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00da      	lsls	r2, r3, #3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	0d1b      	lsrs	r3, r3, #20
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c5c:	e05f      	b.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c64:	d106      	bne.n	8003c74 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d050      	beq.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c7c:	f7fd f8ec 	bl	8000e58 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d902      	bls.n	8003c92 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d13d      	bne.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003caa:	d111      	bne.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb4:	d004      	beq.n	8003cc0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d107      	bne.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd8:	d10f      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e010      	b.n	8003d30 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d197      	bne.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000000 	.word	0x20000000

08003d3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d50:	d111      	bne.n	8003d76 <SPI_EndRxTransaction+0x3a>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5a:	d004      	beq.n	8003d66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d107      	bne.n	8003d76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fec5 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e023      	b.n	8003de4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da4:	d11d      	bne.n	8003de2 <SPI_EndRxTransaction+0xa6>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dae:	d004      	beq.n	8003dba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d113      	bne.n	8003de2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff ff2a 	bl	8003c20 <SPI_WaitFifoStateUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e000      	b.n	8003de4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff0b 	bl	8003c20 <SPI_WaitFifoStateUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e027      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fe70 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e014      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff fee4 	bl	8003c20 <SPI_WaitFifoStateUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e000      	b.n	8003e70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e80:	f7fc ffea 	bl	8000e58 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0220 	bic.w	r2, r2, #32
 8003e94:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	2164      	movs	r1, #100	; 0x64
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffa6 	bl	8003dec <SPI_EndRxTxTransaction>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d115      	bne.n	8003ee6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fda6 	bl	8000a20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ed4:	e00e      	b.n	8003ef4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fc94 	bl	800380c <HAL_SPI_TxRxCpltCallback>
}
 8003ee4:	e006      	b.n	8003ef4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fc96 	bl	8003820 <HAL_SPI_ErrorCallback>
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f12:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003f14:	f7fc ffa0 	bl	8000e58 <HAL_GetTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2164      	movs	r1, #100	; 0x64
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff0c 	bl	8003d3c <SPI_EndRxTransaction>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	f043 0220 	orr.w	r2, r3, #32
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc fd6a 	bl	8000a20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003f4c:	e002      	b.n	8003f54 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fc66 	bl	8003820 <HAL_SPI_ErrorCallback>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e040      	b.n	8003ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc fe1c 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8c0 	bl	8004120 <UART_SetConfig>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fb12 	bl	80045dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fb99 	bl	8004720 <UART_CheckIdleState>
 8003fee:	4603      	mov	r3, r0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	2b20      	cmp	r3, #32
 800400e:	f040 8081 	bne.w	8004114 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_UART_Transmit+0x26>
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e079      	b.n	8004116 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UART_Transmit+0x38>
 800402c:	2302      	movs	r3, #2
 800402e:	e072      	b.n	8004116 <HAL_UART_Transmit+0x11e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	; 0x21
 8004042:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004044:	f7fc ff08 	bl	8000e58 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d108      	bne.n	8004076 <HAL_UART_Transmit+0x7e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e003      	b.n	800407e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004086:	e02d      	b.n	80040e4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fb89 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e039      	b.n	8004116 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b4:	b292      	uxth	r2, r2
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	3302      	adds	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e008      	b.n	80040d2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b292      	uxth	r2, r2
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1cb      	bne.n	8004088 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fb55 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e005      	b.n	8004116 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004120:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4313      	orrs	r3, r2
 8004144:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4ba4      	ldr	r3, [pc, #656]	; (80043e0 <UART_SetConfig+0x2c0>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	430b      	orrs	r3, r1
 8004158:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a9a      	ldr	r2, [pc, #616]	; (80043e4 <UART_SetConfig+0x2c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a91      	ldr	r2, [pc, #580]	; (80043e8 <UART_SetConfig+0x2c8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d121      	bne.n	80041ec <UART_SetConfig+0xcc>
 80041a8:	4b90      	ldr	r3, [pc, #576]	; (80043ec <UART_SetConfig+0x2cc>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d816      	bhi.n	80041e4 <UART_SetConfig+0xc4>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0x9c>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041d9 	.word	0x080041d9
 80041c4:	080041d3 	.word	0x080041d3
 80041c8:	080041df 	.word	0x080041df
 80041cc:	2301      	movs	r3, #1
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e0be      	b.n	8004350 <UART_SetConfig+0x230>
 80041d2:	2302      	movs	r3, #2
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e0bb      	b.n	8004350 <UART_SetConfig+0x230>
 80041d8:	2304      	movs	r3, #4
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e0b8      	b.n	8004350 <UART_SetConfig+0x230>
 80041de:	2308      	movs	r3, #8
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e0b5      	b.n	8004350 <UART_SetConfig+0x230>
 80041e4:	2310      	movs	r3, #16
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	bf00      	nop
 80041ea:	e0b1      	b.n	8004350 <UART_SetConfig+0x230>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7f      	ldr	r2, [pc, #508]	; (80043f0 <UART_SetConfig+0x2d0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d134      	bne.n	8004260 <UART_SetConfig+0x140>
 80041f6:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d829      	bhi.n	8004258 <UART_SetConfig+0x138>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0xec>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004241 	.word	0x08004241
 8004210:	08004259 	.word	0x08004259
 8004214:	08004259 	.word	0x08004259
 8004218:	08004259 	.word	0x08004259
 800421c:	0800424d 	.word	0x0800424d
 8004220:	08004259 	.word	0x08004259
 8004224:	08004259 	.word	0x08004259
 8004228:	08004259 	.word	0x08004259
 800422c:	08004247 	.word	0x08004247
 8004230:	08004259 	.word	0x08004259
 8004234:	08004259 	.word	0x08004259
 8004238:	08004259 	.word	0x08004259
 800423c:	08004253 	.word	0x08004253
 8004240:	2300      	movs	r3, #0
 8004242:	76fb      	strb	r3, [r7, #27]
 8004244:	e084      	b.n	8004350 <UART_SetConfig+0x230>
 8004246:	2302      	movs	r3, #2
 8004248:	76fb      	strb	r3, [r7, #27]
 800424a:	e081      	b.n	8004350 <UART_SetConfig+0x230>
 800424c:	2304      	movs	r3, #4
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	e07e      	b.n	8004350 <UART_SetConfig+0x230>
 8004252:	2308      	movs	r3, #8
 8004254:	76fb      	strb	r3, [r7, #27]
 8004256:	e07b      	b.n	8004350 <UART_SetConfig+0x230>
 8004258:	2310      	movs	r3, #16
 800425a:	76fb      	strb	r3, [r7, #27]
 800425c:	bf00      	nop
 800425e:	e077      	b.n	8004350 <UART_SetConfig+0x230>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a63      	ldr	r2, [pc, #396]	; (80043f4 <UART_SetConfig+0x2d4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d120      	bne.n	80042ac <UART_SetConfig+0x18c>
 800426a:	4b60      	ldr	r3, [pc, #384]	; (80043ec <UART_SetConfig+0x2cc>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004274:	2b10      	cmp	r3, #16
 8004276:	d00f      	beq.n	8004298 <UART_SetConfig+0x178>
 8004278:	2b10      	cmp	r3, #16
 800427a:	d802      	bhi.n	8004282 <UART_SetConfig+0x162>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <UART_SetConfig+0x16c>
 8004280:	e010      	b.n	80042a4 <UART_SetConfig+0x184>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d005      	beq.n	8004292 <UART_SetConfig+0x172>
 8004286:	2b30      	cmp	r3, #48	; 0x30
 8004288:	d009      	beq.n	800429e <UART_SetConfig+0x17e>
 800428a:	e00b      	b.n	80042a4 <UART_SetConfig+0x184>
 800428c:	2300      	movs	r3, #0
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e05e      	b.n	8004350 <UART_SetConfig+0x230>
 8004292:	2302      	movs	r3, #2
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e05b      	b.n	8004350 <UART_SetConfig+0x230>
 8004298:	2304      	movs	r3, #4
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e058      	b.n	8004350 <UART_SetConfig+0x230>
 800429e:	2308      	movs	r3, #8
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e055      	b.n	8004350 <UART_SetConfig+0x230>
 80042a4:	2310      	movs	r3, #16
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	bf00      	nop
 80042aa:	e051      	b.n	8004350 <UART_SetConfig+0x230>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <UART_SetConfig+0x2d8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d120      	bne.n	80042f8 <UART_SetConfig+0x1d8>
 80042b6:	4b4d      	ldr	r3, [pc, #308]	; (80043ec <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d00f      	beq.n	80042e4 <UART_SetConfig+0x1c4>
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d802      	bhi.n	80042ce <UART_SetConfig+0x1ae>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0x1b8>
 80042cc:	e010      	b.n	80042f0 <UART_SetConfig+0x1d0>
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d005      	beq.n	80042de <UART_SetConfig+0x1be>
 80042d2:	2bc0      	cmp	r3, #192	; 0xc0
 80042d4:	d009      	beq.n	80042ea <UART_SetConfig+0x1ca>
 80042d6:	e00b      	b.n	80042f0 <UART_SetConfig+0x1d0>
 80042d8:	2300      	movs	r3, #0
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e038      	b.n	8004350 <UART_SetConfig+0x230>
 80042de:	2302      	movs	r3, #2
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e035      	b.n	8004350 <UART_SetConfig+0x230>
 80042e4:	2304      	movs	r3, #4
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e032      	b.n	8004350 <UART_SetConfig+0x230>
 80042ea:	2308      	movs	r3, #8
 80042ec:	76fb      	strb	r3, [r7, #27]
 80042ee:	e02f      	b.n	8004350 <UART_SetConfig+0x230>
 80042f0:	2310      	movs	r3, #16
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	bf00      	nop
 80042f6:	e02b      	b.n	8004350 <UART_SetConfig+0x230>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <UART_SetConfig+0x2c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d124      	bne.n	800434c <UART_SetConfig+0x22c>
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d012      	beq.n	8004338 <UART_SetConfig+0x218>
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d802      	bhi.n	800431e <UART_SetConfig+0x1fe>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <UART_SetConfig+0x20c>
 800431c:	e012      	b.n	8004344 <UART_SetConfig+0x224>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d006      	beq.n	8004332 <UART_SetConfig+0x212>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x21e>
 800432a:	e00b      	b.n	8004344 <UART_SetConfig+0x224>
 800432c:	2300      	movs	r3, #0
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e00e      	b.n	8004350 <UART_SetConfig+0x230>
 8004332:	2302      	movs	r3, #2
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x230>
 8004338:	2304      	movs	r3, #4
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x230>
 800433e:	2308      	movs	r3, #8
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e005      	b.n	8004350 <UART_SetConfig+0x230>
 8004344:	2310      	movs	r3, #16
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	bf00      	nop
 800434a:	e001      	b.n	8004350 <UART_SetConfig+0x230>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <UART_SetConfig+0x2c4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 8085 	bne.w	8004466 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d823      	bhi.n	80043aa <UART_SetConfig+0x28a>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x248>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043ab 	.word	0x080043ab
 8004370:	08004395 	.word	0x08004395
 8004374:	080043ab 	.word	0x080043ab
 8004378:	0800439b 	.word	0x0800439b
 800437c:	080043ab 	.word	0x080043ab
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043ab 	.word	0x080043ab
 8004388:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7fd fea4 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <UART_SetConfig+0x2dc>)
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7fd fe07 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 800439e:	6178      	str	r0, [r7, #20]
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76bb      	strb	r3, [r7, #26]
        break;
 80043b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8102 	beq.w	80045c0 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d305      	bcc.n	80043d8 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d913      	bls.n	8004400 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	76bb      	strb	r3, [r7, #26]
 80043dc:	e0f0      	b.n	80045c0 <UART_SetConfig+0x4a0>
 80043de:	bf00      	nop
 80043e0:	efff69f3 	.word	0xefff69f3
 80043e4:	40008000 	.word	0x40008000
 80043e8:	40013800 	.word	0x40013800
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40004400 	.word	0x40004400
 80043f4:	40004800 	.word	0x40004800
 80043f8:	40004c00 	.word	0x40004c00
 80043fc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	0214      	lsls	r4, r2, #8
 8004412:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004416:	020b      	lsls	r3, r1, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6852      	ldr	r2, [r2, #4]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	4611      	mov	r1, r2
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	eb13 0b01 	adds.w	fp, r3, r1
 8004428:	eb44 0c02 	adc.w	ip, r4, r2
 800442c:	4658      	mov	r0, fp
 800442e:	4661      	mov	r1, ip
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	f7fb feca 	bl	80001d4 <__aeabi_uldivmod>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444c:	d308      	bcc.n	8004460 <UART_SetConfig+0x340>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004454:	d204      	bcs.n	8004460 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	e0af      	b.n	80045c0 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	76bb      	strb	r3, [r7, #26]
 8004464:	e0ac      	b.n	80045c0 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	d15b      	bne.n	8004528 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004470:	7efb      	ldrb	r3, [r7, #27]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d827      	bhi.n	80044c6 <UART_SetConfig+0x3a6>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x35c>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fd fe1a 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 80044a4:	6178      	str	r0, [r7, #20]
        break;
 80044a6:	e013      	b.n	80044d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fd fe2c 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 80044ac:	6178      	str	r0, [r7, #20]
        break;
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <UART_SetConfig+0x4b8>)
 80044b2:	617b      	str	r3, [r7, #20]
        break;
 80044b4:	e00c      	b.n	80044d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fd fd79 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 80044ba:	6178      	str	r0, [r7, #20]
        break;
 80044bc:	e008      	b.n	80044d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	617b      	str	r3, [r7, #20]
        break;
 80044c4:	e004      	b.n	80044d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	76bb      	strb	r3, [r7, #26]
        break;
 80044ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d074      	beq.n	80045c0 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005a      	lsls	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d916      	bls.n	8004522 <UART_SetConfig+0x402>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d212      	bcs.n	8004522 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f023 030f 	bic.w	r3, r3, #15
 8004504:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	b29a      	uxth	r2, r3
 8004512:	89fb      	ldrh	r3, [r7, #14]
 8004514:	4313      	orrs	r3, r2
 8004516:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	89fa      	ldrh	r2, [r7, #14]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e04e      	b.n	80045c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	76bb      	strb	r3, [r7, #26]
 8004526:	e04b      	b.n	80045c0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004528:	7efb      	ldrb	r3, [r7, #27]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d827      	bhi.n	800457e <UART_SetConfig+0x45e>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x414>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fd fdbe 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 800455c:	6178      	str	r0, [r7, #20]
        break;
 800455e:	e013      	b.n	8004588 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd fdd0 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8004564:	6178      	str	r0, [r7, #20]
        break;
 8004566:	e00f      	b.n	8004588 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <UART_SetConfig+0x4b8>)
 800456a:	617b      	str	r3, [r7, #20]
        break;
 800456c:	e00c      	b.n	8004588 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fd fd1d 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8004572:	6178      	str	r0, [r7, #20]
        break;
 8004574:	e008      	b.n	8004588 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	617b      	str	r3, [r7, #20]
        break;
 800457c:	e004      	b.n	8004588 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	76bb      	strb	r3, [r7, #26]
        break;
 8004586:	bf00      	nop
    }

    if (pclk != 0U)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	085a      	lsrs	r2, r3, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0f      	cmp	r3, #15
 80045a8:	d908      	bls.n	80045bc <UART_SetConfig+0x49c>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d204      	bcs.n	80045bc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	e001      	b.n	80045c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045d8:	00f42400 	.word	0x00f42400

080045dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	d10a      	bne.n	80046f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800472e:	f7fc fb93 	bl	8000e58 <HAL_GetTick>
 8004732:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b08      	cmp	r3, #8
 8004740:	d10e      	bne.n	8004760 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004742:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f82a 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e020      	b.n	80047a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d10e      	bne.n	800478c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f814 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e00a      	b.n	80047a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	e05d      	b.n	8004878 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d059      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fc fb48 	bl	8000e58 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11b      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e042      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02b      	beq.n	8004878 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482e:	d123      	bne.n	8004878 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004838:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004848:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e00f      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	429a      	cmp	r2, r3
 8004894:	d092      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4e0d      	ldr	r6, [pc, #52]	; (80048d8 <__libc_init_array+0x38>)
 80048a4:	4c0d      	ldr	r4, [pc, #52]	; (80048dc <__libc_init_array+0x3c>)
 80048a6:	1ba4      	subs	r4, r4, r6
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	2500      	movs	r5, #0
 80048ac:	42a5      	cmp	r5, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	4e0b      	ldr	r6, [pc, #44]	; (80048e0 <__libc_init_array+0x40>)
 80048b2:	4c0c      	ldr	r4, [pc, #48]	; (80048e4 <__libc_init_array+0x44>)
 80048b4:	f000 f820 	bl	80048f8 <_init>
 80048b8:	1ba4      	subs	r4, r4, r6
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	2500      	movs	r5, #0
 80048be:	42a5      	cmp	r5, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048c8:	4798      	blx	r3
 80048ca:	3501      	adds	r5, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048d2:	4798      	blx	r3
 80048d4:	3501      	adds	r5, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08004960 	.word	0x08004960
 80048dc:	08004960 	.word	0x08004960
 80048e0:	08004960 	.word	0x08004960
 80048e4:	08004964 	.word	0x08004964

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
